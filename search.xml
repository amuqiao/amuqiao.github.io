<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>以太坊（ETH）挖矿教程</title>
      <link href="2021/05/06/yi-tai-fang-eth-wa-kuang-jiao-cheng/"/>
      <url>2021/05/06/yi-tai-fang-eth-wa-kuang-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<blockquote><p>挖矿教程</p></blockquote><span id="more"></span><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><ol><li>准备一台电脑，提供良好的网络</li><li>注册交易所</li><li>注册矿池</li><li>下载挖矿软件</li><li>在挖矿软件中填写矿池地址，开始挖矿</li><li>将矿池中的币提取到交易所，进行交易</li></ol><h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><p><strong>带独显的电脑</strong></p><p>N卡选择GTX1060 6G及其以上，A卡选择RX470 8G及其以上。很多老卡已经不能挖了，或者说有的老卡收益非常低，抵不过电费。</p><p><strong>良好的网络</strong></p><p>网络延迟太厉害会影响产量。另外，接网线比较稳定。</p><h3 id="各种注册"><a href="#各种注册" class="headerlink" title="各种注册"></a>各种注册</h3><h4 id="注册交易所"><a href="#注册交易所" class="headerlink" title="注册交易所"></a>注册交易所</h4><p>注册交易所，作为你贮存ETH和卖出ETH的地点。</p><p>常见的交易所有：火币、币安、OKEX、中币等等等等。</p><p>至于使用哪个交易所，我不提供建议，需要各位自己上网了解各家利弊和风险，自主选择。</p><p>注册完之后，记住“充币地址“，以后从矿池里挖矿到提币门槛，币就会自动从矿池账户转到交易所账户，然后直接开展交易。</p><h4 id="注册矿池"><a href="#注册矿池" class="headerlink" title="注册矿池"></a>注册矿池</h4><p>注册一个自己的矿池，作为你挖矿的地点。</p><p>常见的矿池平台有星火矿池、鱼池、火币矿池等等，我自己用的是星火矿池。</p><p>注册之后，记住你的”<strong>矿池地址</strong>“和”<strong>钱包地址</strong>“，以后挖矿软件要用到。</p><p>然后在提币设置里面输入之前注册交易所里面的”充币地址”，以后从矿池里挖矿到提币门槛了，币就会自动从矿池账户转到交易所账户。</p><p>如果挖币不急着交易，想日积月累以后统一卖了，也可以注册一个钱包来储存ETH，比如Metamask，把矿池里面的自动提币设置改成Metamask里面的ETH账户地址。</p><p><a href="https://help.sparkpool.com/hc/kb/article/1413628/?lang=zh_cn">ETH挖矿教程—星火矿池</a></p><h3 id="各种软件"><a href="#各种软件" class="headerlink" title="各种软件"></a>各种软件</h3><p><strong>挖矿软件</strong></p><p>你需要使用挖矿软件在矿池里面挖矿。</p><p>现在傻瓜式挖矿软件众多，抽水也不低。建议用原版内核，抽水少一点，比如PhoenixMiner或者NBMiner。</p><h4 id="PhoenixMiner"><a href="#PhoenixMiner" class="headerlink" title="PhoenixMiner"></a>PhoenixMiner</h4><ol><li>下载地址github下载</li><li>下载后解压，解压密码phoenix</li><li>用记事本打开start_miner.bat文件</li><li>将ssl:\<a href="http://eu1.ethermine.org:5555修改为你要挖矿的矿池地址，详询矿池">http://eu1.ethermine.org:5555修改为你要挖矿的矿池地址，详询矿池</a></li><li>将0x39e987c72d3b35da03ba9aca26a9e9f91c16c04c修改为你的钱包地址</li><li>将Rig001修改为你的矿工名</li><li>保存后关闭，双击运行开始挖矿</li></ol><h4 id="NBMiner"><a href="#NBMiner" class="headerlink" title="NBMiner"></a>NBMiner</h4><ol><li>下载地址github下载</li><li>下载后解压</li><li>用记事本打开start_eth.bat文件</li><li>将<a href="http://cn.sparkpool.com:13333修改为你要挖矿的矿池地址，详询矿池">http://cn.sparkpool.com:13333修改为你要挖矿的矿池地址，详询矿池</a></li><li>将0x4296116d44a4a7259B52B1A756e19083e675062A修改为你的钱包地址</li><li>将default修改为你的矿工名</li><li>保存后关闭，双击运行开始挖矿</li></ol><h4 id="超频软件"><a href="#超频软件" class="headerlink" title="超频软件"></a>超频软件</h4><p>微星小飞机或者各显卡品牌自带的超频软件，游戏玩家都知道，我就不展开了。</p><p>具体超频思路是，降功耗墙，拉显存，每个显卡体质不同，建议量力而行，搞好散热工作。</p><p>毕竟只是恶心下矿佬，别往极限超。比如RTX3060ti和3070用户，功耗墙56%/显存400/风扇60%就够了。怕坏的话，显存就不要超了，风扇再拉低到50%这样。</p><p>RTX3080和3090用户显存有点危险，想超的话建议给显存加散热贴，把温度传递到背板和散热器上，有条件的知友可以试试</p><h4 id="监测软件"><a href="#监测软件" class="headerlink" title="监测软件"></a>监测软件</h4><p>用GPU-z来观察显卡的实时状态，并且目前只有RTX3080及其以上的显卡才能看显存温度。</p><h3 id="风险提示"><a href="#风险提示" class="headerlink" title="风险提示"></a>风险提示</h3><ul><li>不要在挖矿软件里面填错任何地址，不然你的收益都变成别人的了；</li><li>交易所和矿池潜在倒闭跑路风险，建议用用户量较大的主流平台；</li><li>交易所提现过程中可能受到不干净的资金，导致卡被冻结，建议拿一个闲置的银行卡来换取资金；</li></ul><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="http://www.qskg.top/">轻松矿工</a></li><li><a href="https://help.sparkpool.com/hc/kb/article/1413628/?lang=zh_cn">ETH挖矿教程—星火矿池</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 以太坊 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Django项目里单独运行某个py文件</title>
      <link href="2021/04/30/zai-django-xiang-mu-li-dan-du-yun-xing-mou-ge-py-wen-jian/"/>
      <url>2021/04/30/zai-django-xiang-mu-li-dan-du-yun-xing-mou-ge-py-wen-jian/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在Django项目里单独运行某个py文件</p></blockquote><span id="more"></span><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token punctuation">,</span> sys<span class="token punctuation">,</span> django<span class="token comment"># BASE_DIR 寻找项目根目录</span>BASE_DIR <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>BASE_DIR<span class="token punctuation">)</span>os<span class="token punctuation">.</span>environ<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">'DJANGO_SETTINGS_MODULE'</span><span class="token punctuation">,</span> <span class="token string">'project_name.settings'</span><span class="token punctuation">)</span>django<span class="token punctuation">.</span>setup<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">from</span> app<span class="token punctuation">.</span>models <span class="token keyword">import</span> Person<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token builtin">all</span> <span class="token operator">=</span>Person<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">all</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用命令整理</title>
      <link href="2021/04/29/linux-chang-yong-ming-ling-zheng-li/"/>
      <url>2021/04/29/linux-chang-yong-ming-ling-zheng-li/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Linux 常用命令整理</p></blockquote><span id="more"></span><h3 id="端口占用"><a href="#端口占用" class="headerlink" title="端口占用"></a>端口占用</h3><p>lsof -i:端口号 用于查看某一端口的占用情况，比如查看8000端口使用情况，lsof -i:8000</p><pre class="line-numbers language-none"><code class="language-none"># lsof -i:端口号➜  lsof -i:8001COMMAND   PID     USER   FD   TYPE             DEVICE SIZE&#x2F;OFF NODE NAMEPython  12594 wangqiao    5u  IPv4 0xe79196fc978d9f53      0t0  TCP *:vcom-tunnel (LISTEN)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>netstat -tunlp |grep 端口号，用于查看指定的端口号的进程情况，如查看8000端口的情况，netstat -tunlp |grep 8000</p><pre class="line-numbers language-none"><code class="language-none"># netstat -tunlp Active Internet connections (only servers)Proto Recv-Q Send-Q Local Address               Foreign Address             State       PID&#x2F;Program name   tcp        0      0 0.0.0.0:111                 0.0.0.0:*                   LISTEN      4814&#x2F;rpcbind        tcp        0      0 0.0.0.0:5908                0.0.0.0:*                   LISTEN      25492&#x2F;qemu-kvm      tcp        0      0 0.0.0.0:6996                0.0.0.0:*                   LISTEN      22065&#x2F;lwfs          tcp        0      0 192.168.122.1:53            0.0.0.0:*                   LISTEN      38296&#x2F;dnsmasq       tcp        0      0 0.0.0.0:22                  0.0.0.0:*                   LISTEN      5278&#x2F;sshd           tcp        0      0 127.0.0.1:631               0.0.0.0:*                   LISTEN      5013&#x2F;cupsd          tcp        0      0 127.0.0.1:25                0.0.0.0:*                   LISTEN      5962&#x2F;master         tcp        0      0 0.0.0.0:8666                0.0.0.0:*                   LISTEN      44868&#x2F;lwfs          tcp        0      0 0.0.0.0:8000                0.0.0.0:*                   LISTEN      22065&#x2F;lwfs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none"># netstat -tunlp | grep 8000tcp        0      0 0.0.0.0:8000                0.0.0.0:*                   LISTEN      22065&#x2F;lwfs <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="磁盘清理"><a href="#磁盘清理" class="headerlink" title="磁盘清理"></a>磁盘清理</h3><pre class="line-numbers language-none"><code class="language-none">du -shdu -sh *df -hdu -sh * grep Gll ll -h<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pycharm配置autopep8</title>
      <link href="2021/04/28/pycharm-pei-zhi-autopep8/"/>
      <url>2021/04/28/pycharm-pei-zhi-autopep8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Pycharm让代码自动转换成pip8风格</p></blockquote><span id="more"></span><p>Pycharm本身是有pep8风格检测的，当你敲得代码中不符合规范时，会有下划波浪线提示。为了去掉这些难看的波浪线，我们需要借助autopep8这个工具让代码自动转换成pip8风格。</p><h3 id="安装autopep8"><a href="#安装autopep8" class="headerlink" title="安装autopep8"></a>安装autopep8</h3><pre class="line-numbers language-none"><code class="language-none">pip install autopep8<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="mac-配置"><a href="#mac-配置" class="headerlink" title="mac 配置"></a>mac 配置</h3><p>Preferences-&gt;Tools-&gt;External Tools-&gt;点击加号<br><img src="https://aamuqiao.oss-cn-beijing.aliyuncs.com/uPic/AcfE3V.png" alt="AcfE3V"><br>点击+号后出现配置选项<br><img src="https://aamuqiao.oss-cn-beijing.aliyuncs.com/uPic/z0xfgQ.png" alt="z0xfgQ"><br>添加autopep8配置<br><img src="https://aamuqiao.oss-cn-beijing.aliyuncs.com/uPic/AmDFFI.png" alt="AmDFFI"></p><pre class="line-numbers language-none"><code class="language-none">- Name：Autopep8（可以随便取）- Tools settings:     - Programs：autopep8 （前提是你已经安装了哦）    - Parameters: --in-place --aggressive --aggressive $FilePath$&#96;    - Working directory: $ProjectFileDir$- 点击Output Filters→添加，在对话框中的：Regular expression to match output中输入：$FILE_PATH$\:$LINE$\:$COLUMN$\:.*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置完成External Tools出现aotopep8</p><p>使用</p><p>autopep8在pycharm中的使用：在Pycharm编辑其中新建一个python文件，编辑一些不符合pep8风格的代码；将鼠标放在该文件的编辑器中→右键→External Tools→点击Autopep8。这样你的代码就符合pep8的风格了。</p><h3 id="windows-配置"><a href="#windows-配置" class="headerlink" title="windows 配置"></a>windows 配置</h3><p>File-&gt;Settings-&gt;Tools-&gt;External Tools-&gt; 点击<code>+</code>添加</p><p>配置</p><pre class="line-numbers language-none"><code class="language-none">Name: Autopep8（自定义名称）Tool Settings:    Program:C:\ProgramData\Anaconda4.3.0\Scripts\autopep8.exe    Argumetns: --in-place --aggressive --aggressive $FilePath$    Working direcroty: $ProjectFileDir$    Advanced Options:    Output filters: $FILE_PATH$\:$LINE$\:$COLUMNS$\:.*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>应用</p><p><code>Tools</code>-&gt;<code>External Tools</code>-&gt; <code>Autopep8</code></p><p>参考：</p><ul><li><a href="https://segmentfault.com/a/1190000005816556">Pycharm配置autopep8教程，让Python代码更符合pep8规范</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pycharm </tag>
            
            <tag> autopep8 </tag>
            
            <tag> python </tag>
            
            <tag> ide </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode使用教程</title>
      <link href="2021/04/28/vscode-shi-yong-jiao-cheng/"/>
      <url>2021/04/28/vscode-shi-yong-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<h3 id="python"><a href="#python" class="headerlink" title="python"></a>python</h3><h4 id="在vscode中调试django"><a href="#在vscode中调试django" class="headerlink" title="在vscode中调试django"></a>在vscode中调试django</h4><p>1.创建/打开django项目</p><p>2.在调试侧边栏里，选择创建launch.json</p><p><img src="https://aamuqiao.oss-cn-beijing.aliyuncs.com/uPic/VbnGJr.png" alt="创建launch.json"><br><img src="https://aamuqiao.oss-cn-beijing.aliyuncs.com/uPic/kzbo9I.png" alt="选择python环境"><br><img src="https://aamuqiao.oss-cn-beijing.aliyuncs.com/uPic/htbiNC.png" alt="选择django项目"><br><img src="https://aamuqiao.oss-cn-beijing.aliyuncs.com/uPic/Z8iTuK.png" alt="launch.json"></p><p>配置参考</p><pre class="line-numbers language-none"><code class="language-none">&#123;    &#x2F;&#x2F; 使用 IntelliSense 了解相关属性。     &#x2F;&#x2F; 悬停以查看现有属性的描述。    &#x2F;&#x2F; 欲了解更多信息，请访问: https:&#x2F;&#x2F;go.microsoft.com&#x2F;fwlink&#x2F;?linkid&#x3D;830387    &quot;version&quot;: &quot;0.2.0&quot;,    &quot;configurations&quot;: [        &#123;            &quot;name&quot;: &quot;Python: Django&quot;,            &quot;type&quot;: &quot;python&quot;,            &quot;request&quot;: &quot;launch&quot;,            &quot;program&quot;: &quot;$&#123;workspaceFolder&#125;&#x2F;manage.py&quot;,            &quot;args&quot;: [                &quot;runserver&quot;,                &quot;0.0.0.0:8001&quot;            ],            &quot;django&quot;: true        &#125;    ]&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> vscode </tag>
            
            <tag> ide </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python深拷贝与浅拷贝的区别(一文看懂)</title>
      <link href="2021/04/23/python-shen-kao-bei-yu-qian-kao-bei-de-qu-bie-yi-wen-kan-dong/"/>
      <url>2021/04/23/python-shen-kao-bei-yu-qian-kao-bei-de-qu-bie-yi-wen-kan-dong/</url>
      
        <content type="html"><![CDATA[<blockquote><p>很多人在学python的过程中往往会混淆深拷贝与浅拷贝的概念，深拷贝是对于对象的完全复制，这个好理解。很多人对浅拷贝理解为windows的快捷方式，其实也不尽然…下面的文字将会让你彻底理解他们之间的关系。</p><span id="more"></span><p>先从一道面试题开始：<br>写出下列代码运行结果：</p></blockquote><pre class="line-numbers language-none"><code class="language-none">import copy  a &#x3D; [1, 2, 3, 4, [&#39;a&#39;, &#39;b&#39;]] b &#x3D; a c &#x3D; copy.copy(a) d &#x3D; copy.deepcopy(a) a.append(5)             [1, 2, 3, 4, [&#39;a&#39;, &#39;b&#39;], 5] a[4].append(&#39;c&#39;)        [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]print &#39;a &#x3D; &#39;, a   [1, 2, 3, 4, [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;], 5]print &#39;b &#x3D; &#39;, b  [1, 2, 3, 4, [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;], 5]print &#39;c &#x3D; &#39;, c  [1, 2, 3, 4, [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]]print &#39;d &#x3D; &#39;, d  [1, 2, 3, 4, [&#39;a&#39;, &#39;b&#39;]] <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>很多人不理解c的输出结果，这正是因为没有深刻理解浅拷贝而容易走进的误区。</p><hr><p>先说结论，让我们来一起按图索骥:</p><ul><li>浅拷贝：对顶层对象引用的拷贝。</li><li>深拷贝：对一个对象所有层次的拷贝（递归）。【即按照原来的样子在内存中申请空间另外创建一份，与拷贝对象没有任何关系】</li></ul><p>示例:</p><pre class="line-numbers language-none"><code class="language-none">&gt;&gt;&gt; import copy&gt;&gt;&gt; a &#x3D; [1,2]&gt;&gt;&gt; b &#x3D; [3,4]&gt;&gt;&gt; c &#x3D; [a,b]&gt;&gt;&gt; d &#x3D; c  # d &#x3D; c相当于增加了对 对象[a,b] 的引用计数&gt;&gt;&gt; e &#x3D; copy.copy(c) # e是对c的浅拷贝，即对c顶层对象的拷贝<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="d-c-与-e-copy-copy-c-的区别？"><a href="#d-c-与-e-copy-copy-c-的区别？" class="headerlink" title="d = c 与 e = copy.copy(c)的区别？"></a>d = c 与 e = copy.copy(c)的区别？</h3><pre class="line-numbers language-none"><code class="language-none">&gt;&gt;&gt; id(c),id(d),id(e)(140089296095856, 140089296095856, 140089296096144)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可以看出<code>c</code>和<code>d</code>指向同一块内存,<code>e</code>为另外一块内存区域,所以<code>d=c</code>仅仅是增加了<code>[a,b]</code>的引用计数,而<code>e = copy.copy(c)</code>使系统在内存中另外申请一块内存,用于存放<code>[a,b]</code>的值.</p><h3 id="针对可变与不可变类型的浅拷贝"><a href="#针对可变与不可变类型的浅拷贝" class="headerlink" title="针对可变与不可变类型的浅拷贝"></a>针对可变与不可变类型的浅拷贝</h3><ul><li>可变类型mutable：列表、字典</li></ul><pre class="line-numbers language-none"><code class="language-none">&gt;&gt;&gt; import copy&gt;&gt;&gt; a &#x3D; [1,2]&gt;&gt;&gt; b &#x3D; copy.copy(a)&gt;&gt;&gt; id(a)139729228940856&gt;&gt;&gt; id(b) 139729228503808<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>浅拷贝对于可变类型而言：在内存重新划分一块区域，其中保存对顶层对象的引用</p><ul><li>不可变类型immutable：数字、字符串、元组</li></ul><pre class="line-numbers language-none"><code class="language-none">&gt;&gt;&gt; import copy&gt;&gt;&gt; a &#x3D; &quot;amuqiao&quot;&gt;&gt;&gt; b &#x3D; copy.copy(a)&gt;&gt;&gt; id(a)140663661215344&gt;&gt;&gt; id(b)140663661215344<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>浅拷贝对于不可变类型而言是对被拷贝对象的引用</p><h3 id="带着结论回顾第一题"><a href="#带着结论回顾第一题" class="headerlink" title="带着结论回顾第一题"></a>带着结论回顾第一题</h3><pre class="line-numbers language-none"><code class="language-none">import copy  a &#x3D; [1, 2, 3, 4, [&#39;a&#39;, &#39;b&#39;]] b &#x3D; a c &#x3D; copy.copy(a) d &#x3D; copy.deepcopy(a) a.append(5)             [1, 2, 3, 4, [&#39;a&#39;, &#39;b&#39;], 5] a[4].append(&#39;c&#39;)        [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]print &#39;a &#x3D; &#39;, a   [1, 2, 3, 4, [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;], 5]print &#39;b &#x3D; &#39;, b  [1, 2, 3, 4, [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;], 5]# 可以得到两点:1.c是对a的浅拷贝;2.a是可变类型,即只保存对a顶层对象的引用。# 换句话说:在内存中重新划分一块内存,用于保存对a顶层对象的引用,此时id(a)不等于id(c),# 当a.append(5)的时候,c中保存的&quot;a的顶层对象的引用&quot;的值并没有改变,所以c不变# 当a[4].append(&#39;c&#39;)的时候,c中保存的&quot;a的顶层对象的引用&quot;的值[&#39;a&#39;, &#39;b&#39;]变成了# [&#39;a&#39;, &#39;b&#39;,&#39;c&#39;],所以c也改变了print &#39;c &#x3D; &#39;, c  [1, 2, 3, 4, [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]]print &#39;d &#x3D; &#39;, d  [1, 2, 3, 4, [&#39;a&#39;, &#39;b&#39;]] <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3><p>对一个对象所有层次的拷贝（递归）。【即按照原来的样子在内存中申请空间另外创建一份，与拷贝对象没有任何关系】</p><p>参考链接:<br>1.<a href="http://www.cnblogs.com/nobkb/p/3322684.html">Python中的copy和deepcopy</a><br>2.<a href="http://www.cnblogs.com/huamingao/p/5809936.html">理解python可变类型vs不可变类型，深拷贝vs浅拷贝</a></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> copy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python中requests使用指南</title>
      <link href="2021/04/23/python-zhong-requests-shi-yong-zhi-nan/"/>
      <url>2021/04/23/python-zhong-requests-shi-yong-zhi-nan/</url>
      
        <content type="html"><![CDATA[<blockquote><p>python模块requests使用指南</p></blockquote><span id="more"></span><ul><li>使用get方法带参数请求时，是params=参数字典</li><li>使用post方法带参数请求时，是post=参数字典</li><li>在url编码时，有些编码是把空格编码为+，有些则是编码为%20</li><li>requests会对参数进行自动编码</li></ul><h3 id="get方法带参数请求"><a href="#get方法带参数请求" class="headerlink" title="get方法带参数请求"></a>get方法带参数请求</h3><pre class="line-numbers language-none"><code class="language-none">params&#x3D;&#123;    &#39;cid&#39;:567464,    &#39;page&#39;:1,    &#39;key&#39;:&#39;&#39;,    &#39;language&#39;:1,    &#39;gtk&#39;:6,    &#39;_cid&#39;:567464,    &#39;_mid&#39;:34949,    &#39;_dt&#39;:&#39;2019-05-03 13:03:08&#39;,    &#39;_sign&#39;:&#39;e74c8c52618a64a454dd7f12aff3cc1c&#39;    &#125;def getFun(url,data):    ret&#x3D;requests.get(url,params&#x3D;params)    print(ret.url)    return ret<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="post方法带参数请求"><a href="#post方法带参数请求" class="headerlink" title="post方法带参数请求"></a>post方法带参数请求</h3><pre class="line-numbers language-none"><code class="language-none">data&#x3D;&#123;    &#39;cid&#39;:567464,    &#39;page&#39;:1,    &#39;key&#39;:&#39;&#39;,    &#39;language&#39;:1,    &#39;gtk&#39;:6,    &#39;_cid&#39;:567464,    &#39;_mid&#39;:34949,    &#39;_dt&#39;:&#39;2019-05-03 13:03:08&#39;,    &#39;_sign&#39;:&#39;e74c8c52618a64a454dd7f12aff3cc1c&#39;    &#125;def getFun(url,data):    ret&#x3D;requests.post(url,data&#x3D;data)    print(ret.url)    return ret<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> requests </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python模块搜索路径(看这一篇就够了)</title>
      <link href="2021/04/22/python-mo-kuai-sou-suo-lu-jing-kan-zhe-yi-pian-jiu-gou-liao/"/>
      <url>2021/04/22/python-mo-kuai-sou-suo-lu-jing-kan-zhe-yi-pian-jiu-gou-liao/</url>
      
        <content type="html"><![CDATA[<blockquote><p>由于某些原因，执行Python程序时，常常出现ImportError、ModuleNotFoundError等错误，归根究底，是当前需要的模块不在python搜索路径中。那么，Python 如何知道在哪里搜索模块的路径呢？</p></blockquote><h3 id="什么是模块搜索路径？"><a href="#什么是模块搜索路径？" class="headerlink" title="什么是模块搜索路径？"></a>什么是模块搜索路径？</h3><p>Python导入模块<code>hello</code>时，按照以下路径进行搜索</p><pre class="line-numbers language-none"><code class="language-none">1.具有该名称的内置模块2.在变量 sys.path 给出的目录列表中搜索名为 hello.py 的文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>sys.path</code> 从这些位置初始化：</p><pre class="line-numbers language-none"><code class="language-none">1.包含输入脚本的目录（或当前目录，当没有指定文件时）2.PYTHONPATH（目录名列表，与 shell 变量 PATH 语法相同）3.与安装相关的默认值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>查看搜索路径</p><pre class="line-numbers language-none"><code class="language-none"># &#39;&#39; 表示当前目录（当前脚本所在的路径）$ python&gt;&gt;&gt; import sys&gt;&gt;&gt; sys.path[&#39;&#39;, &#39;&#x2F;usr&#x2F;local&#x2F;var&#x2F;pyenv&#x2F;versions&#x2F;3.6.5&#x2F;lib&#x2F;python36.zip&#39;, &#39;&#x2F;usr&#x2F;local&#x2F;var&#x2F;pyenv&#x2F;versions&#x2F;3.6.5&#x2F;lib&#x2F;python3.6&#39;, &#39;&#x2F;usr&#x2F;local&#x2F;var&#x2F;pyenv&#x2F;versions&#x2F;3.6.5&#x2F;lib&#x2F;python3.6&#x2F;lib-dynload&#39;, &#39;&#x2F;Users&#x2F;wangqiao&#x2F;code&#x2F;TH&#x2F;THKarma&#x2F;venv&#x2F;lib&#x2F;python3.6&#x2F;site-packages&#39;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加模块搜索路径"><a href="#添加模块搜索路径" class="headerlink" title="添加模块搜索路径"></a>添加模块搜索路径</h3><p>为了解决上述问题，需要添加模块搜索路径，可以使用以下几种方式</p><h4 id="动态增加路径"><a href="#动态增加路径" class="headerlink" title="动态增加路径"></a>动态增加路径</h4><p>临时生效，对于不经常使用的模块，这通常是最好的方式，因为不必用所有次要模块的路径来污染 <code>PYTHONPATH</code>。</p><p>通过 <code>sys</code> 模块的 <code>append()</code> 方法在 Python 环境中增加搜索路径：</p><pre class="line-numbers language-none"><code class="language-none">&gt;&gt;&gt; import sys&gt;&gt;&gt; sys.path.append(&#39;&#x2F;home&#x2F;wang&#x2F;workspace&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="修改-PYTHONPATH-变量"><a href="#修改-PYTHONPATH-变量" class="headerlink" title="修改 PYTHONPATH 变量"></a>修改 <code>PYTHONPATH</code> 变量</h4><p>永久生效，对于在许多程序中都使用的模块，可以采用这种方式。这将改变所有 Python 应用的搜索路径，因为启动 Python 时，它会读取这个变量，甚至不同版本的 Python 都会受影响。</p><pre class="line-numbers language-none"><code class="language-none">vi ~&#x2F;.bash_profileexport PYTHONPATH&#x3D;$PYTHONPATH:&#x2F;home&#x2F;wang&#x2F;workspace或者export PYTHONPATH&#x3D;&#x2F;Users&#x2F;wangqiao&#x2F;code&#x2F;TH:$PYTHONPATHsource ~&#x2F;.bash_profile  # 使配置生效<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="增加-pth-文件"><a href="#增加-pth-文件" class="headerlink" title="增加 .pth 文件"></a>增加 <code>.pth</code> 文件</h4><p>永久生效，这是最简单的、也是推荐的方式,<br>Python在遍历已知的库文件目录过程中，如果见到一个<code>.pth</code> 文件，就会将文件中所记录的路径加入到 <code>sys.path</code> 设置中，于是 <code>.pth</code> 文件说指明的库也就可以被 Python 运行环境找到了。<br>python中有一个<code>.pth</code>文件，该文件的用法是：</p><p>在 <code>/usr/local/lib/python3.5/site-packages</code> 或者当前虚拟环境下<code>site-packages</code> 中添加一个扩展名为 <code>.pth</code> 的配置文件（例如：my.pth），内容为要添加的路径：</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;Users&#x2F;wangqiao&#x2F;code&#x2F;TH&#x2F;THKarma&#x2F;Users&#x2F;wangqiao&#x2F;code&#x2F;TH<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>验证路径是否添加</p><pre class="line-numbers language-none"><code class="language-none">$ python&gt;&gt;&gt; import sys&gt;&gt;&gt; sys.path[&#39;&#39;, &#39;&#x2F;usr&#x2F;local&#x2F;var&#x2F;pyenv&#x2F;versions&#x2F;3.6.5&#x2F;lib&#x2F;python36.zip&#39;, &#39;&#x2F;usr&#x2F;local&#x2F;var&#x2F;pyenv&#x2F;versions&#x2F;3.6.5&#x2F;lib&#x2F;python3.6&#39;, &#39;&#x2F;usr&#x2F;local&#x2F;var&#x2F;pyenv&#x2F;versions&#x2F;3.6.5&#x2F;lib&#x2F;python3.6&#x2F;lib-dynload&#39;, &#39;&#x2F;Users&#x2F;wangqiao&#x2F;code&#x2F;TH&#x2F;THKarma&#x2F;venv&#x2F;lib&#x2F;python3.6&#x2F;site-packages&#39;, &#39;&#x2F;Users&#x2F;wangqiao&#x2F;code&#x2F;TH&#x2F;THKarma&#39;, &#39;&#x2F;Users&#x2F;wangqiao&#x2F;code&#x2F;TH&#39;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注意，如果添加了路径还是出现<code>ModuleNotFoundError</code>，将项目的上层路径也添加到搜索路径中</p><p>参考：</p><ul><li><a href="https://www.jianshu.com/p/cb6447e1cf88">为Python添加默认模块搜索路径</a></li><li><a href="https://blog.csdn.net/liang19890820/article/details/76219560">Python 模块搜索路径</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 模块搜索路径 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>simplejson和json使用及区别</title>
      <link href="2021/04/22/simplejson-he-json-shi-yong-ji-qu-bie/"/>
      <url>2021/04/22/simplejson-he-json-shi-yong-ji-qu-bie/</url>
      
        <content type="html"><![CDATA[<blockquote><p>json、simplejson效率比较：simplejson在效率上来得有优势，推荐用simplejson</p></blockquote><span id="more"></span><p>几个主要函数：dump、dumps、load、loads，带s跟不带s的区别： 带s的是对 字符串的处理，而不带 s的是对文件对像的处理。</p><h3 id="python-json-dumps-json-dump-的区别"><a href="#python-json-dumps-json-dump-的区别" class="headerlink" title="python json.dumps() json.dump()的区别"></a>python json.dumps() json.dump()的区别</h3><p>首先说明基本功能：</p><ul><li>dumps是将dict转化成str格式，loads是将str转化成dict格式。</li><li>dump和load也是类似的功能，只是与文件操作结合起来了。</li></ul><pre class="line-numbers language-none"><code class="language-none">import simplejson as jsonfw &#x3D; open(&quot;test.txt&quot;,&quot;wb&quot;)dict &#x3D; &#123;&quot;name&quot;:xiaoming,&quot;age&quot;:20,&quot;school&quot;:&quot;sysu&quot;&#125;json.dump(dict,fw) # 存入文件dict &#x3D; json.load(open(&quot;test.txt&quot;,&quot;rb&quot;))for k,v in dict.items():    print k,v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参考文档</p><ul><li><a href="http://www.cnblogs.com/wswang/p/5411826.html">python json.dumps() json.dump()的区别</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> json </tag>
            
            <tag> simplejson </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django ORM中原生JSONField的使用方法</title>
      <link href="2021/04/21/django-orm-zhong-yuan-sheng-jsonfield-de-shi-yong-fang-fa/"/>
      <url>2021/04/21/django-orm-zhong-yuan-sheng-jsonfield-de-shi-yong-fang-fa/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Django最新版v3.1的主要更新之一便是完善了对JSON数据存储的支持，新增models.JSONField<br>和forms.JSONField<br>，可在所有受支持的数据库后端上使用</p></blockquote><p>目前支持的数据库以及对应版本主要有</p><ul><li>MariaDB 10.2.7+</li><li>MySQL 5.7.8+</li><li>Oracle</li><li>PostgreSQL</li><li>SQLite 3.9.0+</li></ul><p>但个别Django的查询方法可能与部分数据库不兼容，例如contains<br>和contained_by<br>就不支持Oracle和SQLite数据库</p><h3 id="JSONField使用"><a href="#JSONField使用" class="headerlink" title="JSONField使用"></a>JSONField使用</h3><pre class="line-numbers language-none"><code class="language-none">from django.db import modelsclass Hero(models.Model):        name &#x3D; models.CharField(max_length&#x3D;200)        data &#x3D; models.JSONField(null&#x3D;True)          def __str__(self):                return self.name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过models.JSONField</p><p>可指定此字段为存储类型为JSON格式。null=True</p><p>表示此字段可以为空，这个NULL指的是SQL NULL</p><p>如果想存储为JsonNULL，则可以使用Value(‘null’)来实现</p><pre class="line-numbers language-none"><code class="language-none">Hero.objects.create(name&#x3D;&#39;coffee&#39;, data&#x3D;Value(&#39;null&#39;))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>SQL NULL与JsonNULL的区别主要在is_null<br>的查询上不同，可以通过以下这个示例来理解下</p><pre class="line-numbers language-none"><code class="language-none">&gt;&gt;&gt; from django.db.models import Value&gt;&gt;&gt;&gt;&gt;&gt; Hero.objects.create(name&#x3D;&#39;ops&#39;)&lt;Hero: ops&gt;&gt;&gt;&gt; Hero.objects.create(name&#x3D;&#39;coffee&#39;, data&#x3D;Value(&#39;null&#39;))&lt;Hero: coffee&gt;&gt;&gt;&gt;&gt;&gt;&gt; Hero.objects.filter(data&#x3D;None)&lt;QuerySet [&lt;Hero: coffee&gt;]&gt;&gt;&gt;&gt; Hero.objects.filter(data&#x3D;Value(&#39;null&#39;))&lt;QuerySet [&lt;Hero: coffee&gt;]&gt;&gt;&gt;&gt;&gt;&gt;&gt; Hero.objects.get(name&#x3D;&#39;ops&#39;).data&gt;&gt;&gt; Hero.objects.get(name&#x3D;&#39;coffee&#39;).data&gt;&gt;&gt;&gt;&gt;&gt; Hero.objects.filter(data__isnull&#x3D;True)&lt;QuerySet [&lt;Hero: ops&gt;]&gt;&gt;&gt;&gt; Hero.objects.filter(data__isnull&#x3D;False)&lt;QuerySet [&lt;Hero: coffee&gt;]&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="JSONField查询"><a href="#JSONField查询" class="headerlink" title="JSONField查询"></a>JSONField查询</h3><pre class="line-numbers language-none"><code class="language-none">data &#x3D; &#123;&#39;age&#39;: 12,&#39;group&#39;:                 &#123;                    &#39;name&#39;: &#39;ow1&#39;,                    &#39;skill&#39;: [                            &#123;&#39;name&#39;: &#39;swim&#39;, &#39;rank&#39;: &#39;A+&#39;&#125;,                            &#123;&#39;name&#39;: &#39;shot&#39;, &#39;rank&#39;: None&#125;                            ]                                    &#125;            &#125;Hero.objects.create(name&#x3D;&#39;ops-coffee.cn&#39;, data&#x3D;data)Hero.objects.create(name&#x3D;&#39;ops-coffee&#39;, data&#x3D;&#123;&#39;age&#39;:16&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当想要查询age为12的数据时可以这样查询</p><pre class="line-numbers language-none"><code class="language-none">Hero.objects.filter(data__age&#x3D;12)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当想要查询group的name为ow1的数据时可以这样查询</p><pre class="line-numbers language-none"><code class="language-none">Hero.objects.filter(data__group__name&#x3D;&#39;ow1&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当想要查询group下skill中第一个数据的name值为swim的数据时可以这样查询</p><pre class="line-numbers language-none"><code class="language-none">Hero.objects.filter(data__group__skill__0__name&#x3D;&#39;swim&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当想要查找包含group键的所有数据时，可以通过has_key来实现</p><pre class="line-numbers language-none"><code class="language-none">Hero.objects.filter(data__has_key&#x3D;&#39;group&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当想要查找同时包含group<br>键和age<br>键的所有数据时，可以通过has_keys<br>来实现</p><pre class="line-numbers language-none"><code class="language-none">Hero.objects.filter(data__has_keys&#x3D;[&#39;group&#39;,&#39;age&#39;])<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当想要查找包含group<br>键或者age<br>键的所有数据时，可以通过has_any_keys<br>来实现</p><pre class="line-numbers language-none"><code class="language-none">Hero.objects.filter(data__has_any_keys&#x3D;[&#39;group&#39;,&#39;age&#39;])<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当想一次性查找包含age<br>为12<br>且group<br>的name<br>为ow1<br>的数据时，可以通过contains<br>来实现</p><pre class="line-numbers language-none"><code class="language-none">Hero.objects.filter(data__contains&#x3D;&#123;&#39;age&#39;:12,&#39;group&#39;: &#123;&#39;name&#39;: &#39;ow1&#39;&#125;&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>JSONField除了支持以上查询方式外，对于ORM所提供的大部分其他查询方式同样支持，例如</p><ul><li>icontains</li><li>endswith</li><li>iendswith</li><li>iexact</li><li>regex</li><li>iregex</li><li>startswith</li><li>istartswith</li><li>lt</li><li>lte</li><li>gt</li><li>gte</li></ul><p>使用起来也是非常方便</p><pre class="line-numbers language-none"><code class="language-none">Hero.objects.filter(data__age__lte&#x3D;12)Hero.objects.filter(data__group__name__startswith&#x3D;&#39;ow&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> django </tag>
            
            <tag> orm </tag>
            
            <tag> jsonfield </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python列表项为dict的去重</title>
      <link href="2021/04/21/python-lie-biao-xiang-wei-dict-de-qu-chong/"/>
      <url>2021/04/21/python-lie-biao-xiang-wei-dict-de-qu-chong/</url>
      
        <content type="html"><![CDATA[<p>有如下列表</p><pre class="line-numbers language-none"><code class="language-none">li &#x3D; [&#123;&#39;a&#39;: 1&#125;, &#123;&#39;b&#39;: 2&#125;, &#123;&#39;a&#39;: 1&#125;]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果采用set的去重方式，则会报错</p><pre class="line-numbers language-none"><code class="language-none">li &#x3D; list(set(li))&gt;&gt;&gt;TypeError: unhashable type: &#39;dict&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可以用下面的方法：<br>第一种：reduce</p><pre class="line-numbers language-none"><code class="language-none">def deleteDuplicate(li):    func &#x3D; lambda x, y: x if y in x else x + [y]    li &#x3D; reduce(func, [[], ] + li)    return li&gt;&gt;&gt; deleteDuplicate(li)&gt;&gt;&gt;[&#123;&#39;a&#39;: 1&#125;, &#123;&#39;b&#39;: 2&#125;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二种：</p><pre class="line-numbers language-none"><code class="language-none">def deleteDuplicate(li):    temp_list &#x3D; list(set([str(i) for i in li]))    li&#x3D;[eval(i) for i in temp_list]    return li&gt;&gt;&gt; deleteDuplicate(li)&gt;&gt;&gt;[&#123;&#39;a&#39;: 1&#125;, &#123;&#39;b&#39;: 2&#125;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第三种：</p><pre class="line-numbers language-none"><code class="language-none">&gt;&gt;&gt;li &#x3D; [dict(t) for t in set([tuple(d.items()) for d in li])]&gt;&gt;&gt;li&gt;&gt;&gt;[&#123;&#39;a&#39;: 1&#125;, &#123;&#39;b&#39;: 2&#125;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>建议使用第三种，因为速度更加快，经过测试相同的数据，第三种方法速度比第一种的10倍。</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> dict </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqlalchemy使用教程</title>
      <link href="2021/04/10/sqlalchemy-shi-yong-jiao-cheng/"/>
      <url>2021/04/10/sqlalchemy-shi-yong-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<blockquote><p>sqlalchemy使用教程</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sqlalchemy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python项目配置文件</title>
      <link href="2021/04/09/python-xiang-mu-pei-zhi-wen-jian/"/>
      <url>2021/04/09/python-xiang-mu-pei-zhi-wen-jian/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Python 项目配置文件</p></blockquote><h3 id="Yaml格式配置文件"><a href="#Yaml格式配置文件" class="headerlink" title="Yaml格式配置文件"></a>Yaml格式配置文件</h3><h4 id="为什么使用YAML"><a href="#为什么使用YAML" class="headerlink" title="为什么使用YAML"></a>为什么使用YAML</h4><ul><li>YAML的可读性好。</li><li>YAML和脚本语言的交互性好。</li><li>YAML使用实现语言的数据类型。</li><li>YAML有一个一致的信息模型。</li><li>YAML易于实现。</li></ul><h4 id="首先安装yaml模块"><a href="#首先安装yaml模块" class="headerlink" title="首先安装yaml模块"></a>首先安装yaml模块</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">pip3 install pyyaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="编写yaml配置文件-yaml-example-yaml"><a href="#编写yaml配置文件-yaml-example-yaml" class="headerlink" title="编写yaml配置文件 yaml_example.yaml"></a>编写yaml配置文件 yaml_example.yaml</h4><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">app_config</span><span class="token punctuation">:</span>    <span class="token key atrule">log_level</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token key atrule">session_server</span><span class="token punctuation">:</span>    <span class="token key atrule">driver</span><span class="token punctuation">:</span> redis    <span class="token key atrule">driver_settings</span><span class="token punctuation">:</span>        <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost        <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6379</span>        <span class="token key atrule">password</span><span class="token punctuation">:</span>         <span class="token key atrule">db</span><span class="token punctuation">:</span> <span class="token number">1</span>        <span class="token key atrule">max_connections</span><span class="token punctuation">:</span> <span class="token number">512</span><span class="token key atrule">cache_server</span><span class="token punctuation">:</span>    <span class="token key atrule">driver</span><span class="token punctuation">:</span> redis    <span class="token key atrule">driver_settings</span><span class="token punctuation">:</span>        <span class="token key atrule">REDIS_HOST</span><span class="token punctuation">:</span> localhost        <span class="token key atrule">REDIS_PORT</span><span class="token punctuation">:</span> <span class="token number">6379</span>        <span class="token key atrule">REDIS_PASSWORD</span><span class="token punctuation">:</span>         <span class="token key atrule">REDIS_DB</span><span class="token punctuation">:</span> <span class="token number">2</span>        <span class="token key atrule">REDIS_EX</span><span class="token punctuation">:</span> <span class="token number">172800</span>         <span class="token key atrule">REDIS_MAX_CONNECTIONS</span><span class="token punctuation">:</span> <span class="token number">512</span><span class="token key atrule">database</span><span class="token punctuation">:</span>    <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">3306</span>    <span class="token key atrule">user</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span>    <span class="token key atrule">database</span><span class="token punctuation">:</span> test    <span class="token key atrule">charset</span><span class="token punctuation">:</span> utf8<span class="token key atrule">captcha_fonts</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> fonts/RedHatDisplay<span class="token punctuation">-</span>Regular.ttf    <span class="token punctuation">-</span> fonts/RedHatDisplay<span class="token punctuation">-</span>Medium.ttf    <span class="token punctuation">-</span> fonts/RedHatDisplay<span class="token punctuation">-</span>Black.ttf    <span class="token punctuation">-</span> fonts/RedHatDisplay<span class="token punctuation">-</span>Bold.ttf<span class="token key atrule">crypto_rsa</span><span class="token punctuation">:</span>    <span class="token key atrule">public_key_file</span><span class="token punctuation">:</span> keys/rsa_pub_key.pem    <span class="token key atrule">private_key_file</span><span class="token punctuation">:</span> keys/rsa_pri_key.pem<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="编写解析yaml文件的python程序-yaml-example-py"><a href="#编写解析yaml文件的python程序-yaml-example-py" class="headerlink" title="编写解析yaml文件的python程序 yaml_example.py"></a>编写解析yaml文件的python程序 yaml_example.py</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> yaml<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'local.yml'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    content <span class="token operator">=</span> yaml<span class="token punctuation">.</span>load<span class="token punctuation">(</span>f<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'before modification:'</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span>    content<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">17</span>    content<span class="token punctuation">[</span><span class="token string">'children'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'after modification'</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="输出配置结果"><a href="#输出配置结果" class="headerlink" title="输出配置结果:"></a>输出配置结果:</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'dict'</span><span class="token operator">></span>before modification<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'junxi'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">'spouse'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Rui'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'children'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Chen You'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Ruo Xi'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>after modification <span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'junxi'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token string">'spouse'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Rui'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'children'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Chen You'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Ruo Xi'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> yaml </tag>
            
            <tag> 配置文件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python日期转换</title>
      <link href="2021/04/09/python-ri-qi-zhuan-huan/"/>
      <url>2021/04/09/python-ri-qi-zhuan-huan/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Python日期转换、datetime模块和time模块的使用</p></blockquote><span id="more"></span><h3 id="Datetime-模块"><a href="#Datetime-模块" class="headerlink" title="Datetime 模块"></a>Datetime 模块</h3><blockquote><p>datetime是Python处理日期和时间的标准库。</p></blockquote><h4 id="获取utc时间"><a href="#获取utc时间" class="headerlink" title="获取utc时间"></a>获取utc时间</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> datetimeutc_now <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>utcnow<span class="token punctuation">(</span><span class="token punctuation">)</span>utc_now_date <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>utcnow<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>date<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 获取年月日</span>utc_now_utctimetuple <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>utcnow<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>utctimetuple<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 获取utc时间戳</span><span class="token operator">></span> <span class="token number">2021</span><span class="token operator">-</span><span class="token number">04</span><span class="token operator">-</span><span class="token number">09</span> <span class="token number">08</span><span class="token punctuation">:</span><span class="token number">03</span><span class="token punctuation">:</span><span class="token number">23.513941</span><span class="token operator">></span> <span class="token number">2021</span><span class="token operator">-</span><span class="token number">04</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">></span> time<span class="token punctuation">.</span>struct_time<span class="token punctuation">(</span>tm_year<span class="token operator">=</span><span class="token number">2021</span><span class="token punctuation">,</span> tm_mon<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> tm_mday<span class="token operator">=</span><span class="token number">9</span><span class="token punctuation">,</span> tm_hour<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">,</span> tm_min<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> tm_sec<span class="token operator">=</span><span class="token number">23</span><span class="token punctuation">,</span> tm_wday<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> tm_yday<span class="token operator">=</span><span class="token number">99</span><span class="token punctuation">,</span> tm_isdst<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="将datetime格式转换成字符串"><a href="#将datetime格式转换成字符串" class="headerlink" title="将datetime格式转换成字符串"></a>将datetime格式转换成字符串</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> datetime<span class="token comment"># datetime.datetime(year, month, day, hour,minute, second）microsecond)</span>d0 <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">(</span><span class="token number">2021</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>d0_str <span class="token operator">=</span> d0<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y-%m-%d %H:%M:%S'</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token number">2021</span><span class="token operator">-</span><span class="token number">04</span><span class="token operator">-</span><span class="token number">03</span> <span class="token number">17</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token number">20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="将字符串转换为datetime格式"><a href="#将字符串转换为datetime格式" class="headerlink" title="将字符串转换为datetime格式"></a>将字符串转换为datetime格式</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> datetimed1 <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span><span class="token string">'2021-4-3 17:10:20'</span><span class="token punctuation">,</span> <span class="token string">'%Y-%m-%d %H:%M:%S'</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token number">2021</span><span class="token operator">-</span><span class="token number">04</span><span class="token operator">-</span><span class="token number">03</span> <span class="token number">17</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token number">20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="求时间差"><a href="#求时间差" class="headerlink" title="求时间差"></a>求时间差</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> datetimed1 <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">(</span><span class="token number">2017</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span>d0 <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">(</span><span class="token number">2017</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">)</span>   day_difference <span class="token operator">=</span> <span class="token punctuation">(</span>d1<span class="token operator">-</span>d0<span class="token punctuation">)</span><span class="token punctuation">.</span>days <span class="token comment"># 4月份共30天 相差9天(不包括5月8日)</span>second_difference <span class="token operator">=</span> <span class="token punctuation">(</span>d1<span class="token operator">-</span>d0<span class="token punctuation">)</span><span class="token punctuation">.</span>total_seconds<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 计算相差秒数</span><span class="token operator">></span> <span class="token number">9</span><span class="token operator">></span> <span class="token number">777600.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="日期加减"><a href="#日期加减" class="headerlink" title="日期加减"></a>日期加减</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> datetime<span class="token comment"># timedelta 入参可选(days: float = ..., seconds: float = ..., microseconds: float = ...,milliseconds: float = ..., minutes: float = ..., hours: float = ...,weeks: float = ...)</span>d0 <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">(</span><span class="token number">2021</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>next_day <span class="token operator">=</span> d0 <span class="token operator">+</span> datetime<span class="token punctuation">.</span>timedelta<span class="token punctuation">(</span>days<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token number">2021</span><span class="token operator">-</span><span class="token number">04</span><span class="token operator">-</span><span class="token number">05</span> <span class="token number">17</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token number">20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="转换为unix时间戳"><a href="#转换为unix时间戳" class="headerlink" title="转换为unix时间戳"></a>转换为unix时间戳</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">import</span> datetimed0 <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">(</span><span class="token number">2021</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>ans_time <span class="token operator">=</span> time<span class="token punctuation">.</span>mktime<span class="token punctuation">(</span>d0<span class="token punctuation">.</span>timetuple<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1617441020.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="将unix时间戳转换为datetime"><a href="#将unix时间戳转换为datetime" class="headerlink" title="将unix时间戳转换为datetime"></a>将unix时间戳转换为datetime</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> datetimedtime <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>fromtimestamp<span class="token punctuation">(</span><span class="token number">1617441020.0</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">2021</span><span class="token operator">-</span><span class="token number">04</span><span class="token operator">-</span><span class="token number">03</span> <span class="token number">17</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token number">20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="输出带有utc时区的datime类型"><a href="#输出带有utc时区的datime类型" class="headerlink" title="输出带有utc时区的datime类型"></a>输出带有utc时区的datime类型</h4><pre class="line-numbers language-none"><code class="language-none">import pytzfrom datetime import datetimeutc &#x3D; pytz.utcdef now() -&gt; datetime:    &quot;&quot;&quot;    返回带有utc时区的aware time    &quot;&quot;&quot;    return datetime.utcnow().replace(tzinfo&#x3D;utc)if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    print(now())    print(now().strftime(&#39;%Y-%m-%d %H:%M:%S&#39;))# 输出2019-04-28 04:20:13.259841+00:002019-04-28 04:20:13<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="time-模块"><a href="#time-模块" class="headerlink" title="time 模块"></a>time 模块</h3><blockquote><p>time.time() 返回当前时间的时间戳（1970纪元后经过的浮点秒数，UTC标准时间戳）</p></blockquote><pre class="line-numbers language-none"><code class="language-none">import timeans_time &#x3D; time.time()&gt; 1617957802.867904<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="将时间戳转换成时间字符串"><a href="#将时间戳转换成时间字符串" class="headerlink" title="将时间戳转换成时间字符串"></a>将时间戳转换成时间字符串</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> timetimestamp <span class="token operator">=</span> <span class="token number">1617441020.0</span><span class="token comment"># 将时间戳转换为本地时间字符串</span>time_str <span class="token operator">=</span> time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y-%m-%d %H:%M:%S'</span><span class="token punctuation">,</span>time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span>timestamp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">2021</span><span class="token operator">-</span><span class="token number">04</span><span class="token operator">-</span><span class="token number">03</span> <span class="token number">17</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token comment"># 将时间戳转换为utc时间字符串</span>time_str <span class="token operator">=</span> time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y-%m-%d %H:%M:%S'</span><span class="token punctuation">,</span>time<span class="token punctuation">.</span>gmtime<span class="token punctuation">(</span>timestamp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">2021</span><span class="token operator">-</span><span class="token number">04</span><span class="token operator">-</span><span class="token number">03</span> <span class="token number">09</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token comment"># 将当前时间戳转换本地时间为字符串</span>time_str <span class="token operator">=</span> time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y-%m-%d %H:%M:%S'</span><span class="token punctuation">)</span>  <span class="token operator">></span> <span class="token number">2021</span><span class="token operator">-</span><span class="token number">04</span><span class="token operator">-</span><span class="token number">09</span> <span class="token number">16</span><span class="token punctuation">:</span><span class="token number">49</span><span class="token punctuation">:</span><span class="token number">32</span><span class="token comment"># 将当前时间戳转换本地时间为字符串 同上</span>time_str <span class="token operator">=</span> time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y-%m-%d %H:%M:%S'</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token operator">></span> <span class="token number">2021</span><span class="token operator">-</span><span class="token number">04</span><span class="token operator">-</span><span class="token number">09</span> <span class="token number">16</span><span class="token punctuation">:</span><span class="token number">49</span><span class="token punctuation">:</span><span class="token number">32</span><span class="token comment"># 将当前时间戳转换为UTC时间字符串</span>time_str <span class="token operator">=</span> time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y-%m-%d %H:%M:%S'</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>gmtime<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token operator">></span> <span class="token number">2021</span><span class="token operator">-</span><span class="token number">04</span><span class="token operator">-</span><span class="token number">09</span> <span class="token number">08</span><span class="token punctuation">:</span><span class="token number">49</span><span class="token punctuation">:</span><span class="token number">32</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="日期格式转换"><a href="#日期格式转换" class="headerlink" title="日期格式转换"></a>日期格式转换</h3><p>python中时间日期格式化符号</p><pre class="line-numbers language-none"><code class="language-none">%y 两位数的年份表示（00-99）%Y 四位数的年份表示（000-9999）%m 月份（01-12）%d 月内中的一天（0-31）%H 24小时制小时数（0-23）%I 12小时制小时数（01-12）%M 分钟数（00-59）%S 秒（00-59）%a 本地简化星期名称%A 本地完整星期名称%b 本地简化的月份名称%B 本地完整的月份名称%c 本地相应的日期表示和时间表示%j 年内的一天（001-366）%p 本地A.M.或P.M.的等价符%U 一年中的星期数（00-53）星期天为星期的开始%w 星期（0-6），星期天为 0，星期一为 1，以此类推。%W 一年中的星期数（00-53）星期一为星期的开始%x 本地相应的日期表示%X 本地相应的时间表示%Z 当前时区的名称%% %号本身<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方法</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">trans_format</span><span class="token punctuation">(</span>time_string<span class="token punctuation">,</span> from_format<span class="token punctuation">,</span> to_format<span class="token operator">=</span><span class="token string">'%Y.%m.%d %H:%M:%S'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    time_struct <span class="token operator">=</span> time<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span>time_string<span class="token punctuation">,</span> from_format<span class="token punctuation">)</span>    times <span class="token operator">=</span> time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span>to_format<span class="token punctuation">,</span> time_struct<span class="token punctuation">)</span>    <span class="token keyword">return</span> times<span class="token comment"># 将11 May转为mm-dd形式</span>time_string <span class="token operator">=</span> <span class="token string">"11 May"</span>times <span class="token operator">=</span> trans_format<span class="token punctuation">(</span>time_string<span class="token punctuation">,</span> <span class="token string">'%d %b'</span><span class="token punctuation">,</span> <span class="token string">'%m-%d'</span><span class="token punctuation">)</span>  <span class="token comment"># 由于没有输入年份，所以输出的默认年份是1900</span><span class="token operator">></span> <span class="token number">05</span><span class="token operator">-</span><span class="token number">11</span><span class="token comment"># 将 %m/%d/%Y 转为 %Y-%m-%d 形式</span>time_string2 <span class="token operator">=</span> <span class="token string">"08/26/1988"</span>times2 <span class="token operator">=</span> trans_format<span class="token punctuation">(</span>time_string2<span class="token punctuation">,</span> <span class="token string">'%m/%d/%Y'</span><span class="token punctuation">,</span> <span class="token string">'%Y-%m-%d'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>times2<span class="token punctuation">)</span><span class="token operator">></span> <span class="token number">1988</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">26</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="获取两个日期之间的所有日期"><a href="#获取两个日期之间的所有日期" class="headerlink" title="获取两个日期之间的所有日期"></a>获取两个日期之间的所有日期</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetime<span class="token punctuation">,</span> timedelta<span class="token keyword">def</span> <span class="token function">get_date_list</span><span class="token punctuation">(</span>start_ymd<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> end_ymd<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    获取日期列表    :param start_ymd: 开始日期 type:datetime or str    :param end_ymd: 结束日期 type:datetime or str    :return:    """</span>    <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>start_ymd<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        start <span class="token operator">=</span> datetime<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>start_ymd<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"%Y%m%d"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        start <span class="token operator">=</span> start_ymd    <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>end_ymd<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        end <span class="token operator">=</span> datetime<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>end_ymd<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"%Y%m%d"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        end <span class="token operator">=</span> end_ymd    <span class="token keyword">def</span> <span class="token function">gen_dates</span><span class="token punctuation">(</span>b_date<span class="token punctuation">,</span> days<span class="token punctuation">)</span><span class="token punctuation">:</span>        day <span class="token operator">=</span> timedelta<span class="token punctuation">(</span>days<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>days<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">yield</span> b_date <span class="token operator">+</span> day <span class="token operator">*</span> i    <span class="token keyword">if</span> start <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        start <span class="token operator">=</span> datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> timedelta<span class="token punctuation">(</span>days<span class="token operator">=</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> end <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        end <span class="token operator">=</span> datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> d <span class="token keyword">in</span> gen_dates<span class="token punctuation">(</span>start<span class="token punctuation">,</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">.</span>days<span class="token punctuation">)</span><span class="token punctuation">:</span>        data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>d<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y%m%d'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    start <span class="token operator">=</span> datetime<span class="token punctuation">(</span><span class="token number">2018</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span>    end <span class="token operator">=</span> datetime<span class="token punctuation">(</span><span class="token number">2018</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>    date_list <span class="token operator">=</span> get_date_list<span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span>    date_list <span class="token operator">=</span> get_date_list<span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">20180528</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"%Y%m%d"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> datetime<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">20180602</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"%Y%m%d"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>date_list<span class="token punctuation">)</span>    <span class="token punctuation">[</span><span class="token string">'20180528'</span><span class="token punctuation">,</span> <span class="token string">'20180529'</span><span class="token punctuation">,</span> <span class="token string">'20180530'</span><span class="token punctuation">,</span> <span class="token string">'20180531'</span><span class="token punctuation">,</span> <span class="token string">'20180601'</span><span class="token punctuation">]</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="封装成类"><a href="#封装成类" class="headerlink" title="封装成类"></a>封装成类</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token triple-quoted-string string">"""日期处理类"""</span><span class="token keyword">import</span> datetime<span class="token keyword">import</span> time<span class="token keyword">class</span> <span class="token class-name">TimeFormat</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token decorator annotation punctuation">@classmethod</span>    <span class="token keyword">def</span> <span class="token function">timestamp_2_datetime</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> ans_time<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""将unix时间戳转换为python的datetime"""</span>        <span class="token keyword">return</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>fromtimestamp<span class="token punctuation">(</span>ans_time<span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@classmethod</span>    <span class="token keyword">def</span> <span class="token function">timestamp_2_str</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> ans_time<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""将unix时间戳转换为时间字符串"""</span>        <span class="token keyword">return</span> time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y-%m-%d %H:%M:%S'</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>gmtime<span class="token punctuation">(</span>ans_time<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@classmethod</span>    <span class="token keyword">def</span> <span class="token function">datetime_2_timestamp</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> d_time<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""将python的datetime转换为unix时间戳"""</span>        <span class="token keyword">return</span> time<span class="token punctuation">.</span>mktime<span class="token punctuation">(</span>d_time<span class="token punctuation">.</span>timetuple<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@classmethod</span>    <span class="token keyword">def</span> <span class="token function">datetime_2_str</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> d_time<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""将python的datetime转换为字符串"""</span>        <span class="token keyword">return</span> d_time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y-%m-%d %H:%M:%S'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    timestamp <span class="token operator">=</span> <span class="token number">1617776979</span>    now_time <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>utcnow<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>TimeFormat<span class="token punctuation">.</span>timestamp_2_str<span class="token punctuation">(</span>timestamp<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>TimeFormat<span class="token punctuation">.</span>timestamp_2_datetime<span class="token punctuation">(</span>timestamp<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>TimeFormat<span class="token punctuation">.</span>datetime_2_timestamp<span class="token punctuation">(</span>now_time<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>TimeFormat<span class="token punctuation">.</span>datetime_2_str<span class="token punctuation">(</span>now_time<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token number">2021</span><span class="token operator">-</span><span class="token number">04</span><span class="token operator">-</span><span class="token number">07</span> <span class="token number">06</span><span class="token punctuation">:</span><span class="token number">29</span><span class="token punctuation">:</span><span class="token number">39</span><span class="token operator">></span> <span class="token number">2021</span><span class="token operator">-</span><span class="token number">04</span><span class="token operator">-</span><span class="token number">07</span> <span class="token number">14</span><span class="token punctuation">:</span><span class="token number">29</span><span class="token punctuation">:</span><span class="token number">39</span><span class="token operator">></span> <span class="token number">1617930414.0</span><span class="token operator">></span> <span class="token number">2021</span><span class="token operator">-</span><span class="token number">04</span><span class="token operator">-</span><span class="token number">09</span> <span class="token number">09</span><span class="token punctuation">:</span><span class="token number">06</span><span class="token punctuation">:</span><span class="token number">54</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="其他时间处理模块"><a href="#其他时间处理模块" class="headerlink" title="其他时间处理模块"></a>其他时间处理模块</h3><ul><li>pytz模块</li><li>dateutil模块</li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> datetime </tag>
            
            <tag> time </tag>
            
            <tag> 时间戳 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python文件路径</title>
      <link href="2021/04/02/python-wen-jian-lu-jing/"/>
      <url>2021/04/02/python-wen-jian-lu-jing/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-none"><code class="language-none"># -*- coding: utf-8 -*-# @Time    :2018&#x2F;11&#x2F;19 1:16 PM# @Author  : wangqiao# -*- coding: UTF-8 -*-import os.pathimport sysdef print_path():    print(&quot;项目绝对路径 os.path.dirname(os.path.abspath(__file__)):&#123;&#125;&quot;.format(os.path.dirname(os.path.abspath(__file__))))    print(&#39;在原路径上添加路径:&#39;, os.path.join(&#39;&#x2F;home&#x2F;python&#39;, &#39;Desktop&#39;))    print(&#39;文件绝对路径:&#39;, os.path.abspath(sys.argv[0]))    print(&#39;文件当前目录&#39;, os.path.dirname(__file__))    print(        &#39;文件上级目录&#39;,        os.path.abspath(            os.path.join(                os.path.dirname(__file__),                &#39;..&#39;)))    print(        &#39;同级其他目录&#39;,        os.path.abspath(            os.path.join(                os.path.dirname(__file__),                &#39;..&#x2F;database&#39;)))    print(        &#39;文件上上级目录&#39;,        os.path.abspath(            os.path.join(                os.path.dirname(__file__),                &#39;..&#x2F;..&#39;)))    print(        &#39;文件上上上级目录&#39;,        os.path.abspath(            os.path.join(                os.path.dirname(__file__),                &#39;..&#x2F;..&#x2F;..&#39;)))    print(&#39;csv&#39;, os.path.join(os.path.dirname(__file__), &#39;csv&#x2F;app_store&#39;))    print(        &#39;csv&#39;,        os.path.abspath(            os.path.join(                os.path.dirname(__file__),                &#39;csv&#x2F;app_store&#39;)))if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    print_path()    print(os.path.abspath(__file__))    print(os.path.commonpath(os.path.abspath(__file__)))    print(os.path.dirname(os.path.abspath(__file__)).split(&#39;&#x2F;&#39;)[-1])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 文件路径 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gitignore文件屏蔽规则</title>
      <link href="2021/03/31/gitignore-wen-jian-ping-bi-gui-ze/"/>
      <url>2021/03/31/gitignore-wen-jian-ping-bi-gui-ze/</url>
      
        <content type="html"><![CDATA[<p>在使用git仓库时，有些特殊文件我们希望能够进行屏蔽，而有些文件我们希望能够保留在版本库中，此时就用到了git的.gitignore 文件。</p><p>在项目根路径创建<code>.gitignore</code>文件</p><h3 id="gitignore-文件规范"><a href="#gitignore-文件规范" class="headerlink" title="gitignore 文件规范"></a>gitignore 文件规范</h3><p><code>.gitignore </code>文件格式规范如下：</p><ul><li>所有空行或#开头的行都会被忽略；</li><li>可以使用标准的 glob 模式匹配；</li><li>文件或目录前加 / 表示仓库根目录的对应文件；</li><li>匹配模式最后跟反斜杠 / 说明要忽略的是目录；</li><li>要特殊不忽略某个文件或目录，可以在模式前加上取反 ! 。</li></ul><p>其中 glob 模式是指 shell 所使用的简化了的正则表达式。</p><ul><li>星号 * 匹配零个或多个任意字符；</li><li>[abc]匹配任何一个列在方括号中的字符（这个例子要么匹配一个 a，要么匹配一个 b，要么匹配一个 c）；- - 问号 ? 只匹配一个任意字符；</li><li>如果在方括号中使用短划线分隔两个字符，表示所有在这两个字符范围内的都可以匹配（比如 [0-9] 表示匹配所有 0 到 9 的数字）。</li></ul><p>下面是一个 <code>.gitignore</code> 文件例子，注释上附录有说明：</p><pre class="line-numbers language-none"><code class="language-none">*.a                 # 所有以 &#39;.a&#39; 为后缀的文件都屏蔽掉# Office 缓存文件~&#39;$&#39;*.docx~&#39;$&#39;*.ppt~&#39;$&#39;*.pptx ~&#39;$&#39;*.xlstags                # 仓库中所有名为 tags 的文件都屏蔽core.*              # 仓库中所有以 &#39;core.&#39; 开头的文件都屏蔽tools&#x2F;              # 屏蔽目录 toolslog&#x2F;*               # 屏蔽目录 log 下的所有文件，但不屏蔽 log 目录本身&#x2F;log.log            # 只屏蔽仓库根目录下的 log.log 文件，其他目录中的不屏蔽readme.md           # 屏蔽仓库中所有名为 readme.md 的文件!&#x2F;readme.md         # 在上一条屏蔽规则的条件下，不屏蔽仓库根目录下的 readme.md 文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例子中的最后两条的顺序很重要，必须要先屏蔽所有的，然后才建立特殊不屏蔽的规则！</p><h3 id="在github上创建代码仓库时忘记添加-gitignore文件或修改了-gitignore该怎么办？"><a href="#在github上创建代码仓库时忘记添加-gitignore文件或修改了-gitignore该怎么办？" class="headerlink" title="在github上创建代码仓库时忘记添加.gitignore文件或修改了.gitignore该怎么办？"></a>在<code>github</code>上创建代码仓库时忘记添加<code>.gitignore</code>文件或修改了<code>.gitignore</code>该怎么办？</h3><pre class="line-numbers language-none"><code class="language-none">#清除本地缓存(改变成未track状态)#git rm -r --cached . 表示清除项目中所有文件的本地缓存#xxx表示不想版本控制的文件，比如小编可以输入test.o#.gitignore中的忽略规则应该与之相对应git rm -r --cached xxxgit add .   #添加除了忽略文件外的所有文件git commit -m &quot;此处可以描述你提交的信息&quot;git push -f #强制推送<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> gitignore </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Prometheus入门教程</title>
      <link href="2021/03/31/prometheus-ru-men-jiao-cheng/"/>
      <url>2021/03/31/prometheus-ru-men-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Prometheus 一款优秀的开源监控告警系统</p></blockquote><span id="more"></span><h3 id="Prometheus是什么"><a href="#Prometheus是什么" class="headerlink" title="Prometheus是什么"></a>Prometheus是什么</h3><p>Prometheus 最开始是由 SoundCloud 开发的开源监控告警系统，是 Google BorgMon 监控系统的开源版本。能很好地与容器平台、云平台配合。</p><p>2016年继Kubernetes之后成为第二个正式加入CNCF基金会的项目，随着 Kubernetes 在容器编排领头羊地位的确立，Prometheus 也成为 Kubernetes 容器监控的标配。</p><h4 id="设计架构"><a href="#设计架构" class="headerlink" title="设计架构"></a>设计架构</h4><p>监控系统的总体架构大多是类似的，都有数据采集、数据处理存储、告警动作触发和告警，以及对监控数据的展示。</p><p>下面是 Prometheus 的架构：<br><img src="https://aamuqiao.oss-cn-beijing.aliyuncs.com/uPic/Prometheus%E8%AE%BE%E8%AE%A1%E6%9E%B6%E6%9E%84.png" alt="Prometheus设计架构"></p><p>Prometheus Server 负责定时从 Prometheus 采集端 Pull(拉) 监控数据。Prometheus 采集端可以是实现了 /metrics 接口的服务，可以是从第三方服务导出监控数据的 exporter，也可以是存放短生命周期服务监控数据的 Pushgateway。相比大多数采用 Push(推) 监控数据的方式，Pull 使得 Promethues Server 与被采集端的耦合度更低，Prometheus Server 更容易实现水平拓展。</p><p>对于采集的监控数据，Prometheus Server 使用内置时序数据库 TSDB 进行存储。同时也会使用这些监控数据进行告警规则的计算，产生的告警将会通过 Prometheus 另一个独立的组件 Alertmanager 进行发送。Alertmanager 提供了十分灵活的告警方式，并且支持高可用部署。</p><p>对于采集到的监控数据，可以通过 Prometheus 自身提供的 Web UI 进行查询，也可以使用 Grafana 进行展示。</p><h4 id="Prometheus与Influxdb的区别"><a href="#Prometheus与Influxdb的区别" class="headerlink" title="Prometheus与Influxdb的区别"></a>Prometheus与Influxdb的区别</h4><p><strong>prometheus是pull模型，influxdb是push模型。</strong></p><p>prometheus server启动的时候，你需要告诉它你想它监听哪些节点，每次增加或者减少节点，得重启prometheus server的。</p><p>而influxdb则是，每个监控的节点自己配置好influxdb server的地址，向服务端推送数据</p><p>对于Prometheus而言，监控节点不需要知道server在哪里，即使server挂了，对监控节点本身无影响</p><p>相对的，influxdb server如果挂了，那么所有influxdb 节点发送的请求都会出错</p><p>当然，prometheus可以通过push gateway转换成push模型，influxdb可以通过collector转化成pull模型</p><p><strong>influxdb的查询语句是类SQL，prometheus则不是</strong></p><p>Prometheus 是一套完整的监控系统，包括数据采集、数据处理存储、告警动作触发和告警，以及对监控数据的展示(数据展示很烂，官方都推荐使用Grafana)</p><p>influxdb 只是一个数据库</p><h3 id="安装Prometheus"><a href="#安装Prometheus" class="headerlink" title="安装Prometheus"></a>安装Prometheus</h3><p>Prometheus基于Golang编写，编译后的软件包，不依赖于任何的第三方依赖。用户只需要下载对应平台的二进制包，解压并且添加基本的配置即可正常启动Prometheus Server。<a href="https://github.com/prometheus/prometheus">Prometheus-GitHub项目</a></p><p>本文直接从<a href="https://prometheus.io/download/">官网下载</a></p><p><code>从二进制包安装</code>和<code>使用Docker安装</code>请查阅<a href="https://github.com/prometheus/prometheus">Prometheus-GitHub项目</a></p><p>解压，并将Prometheus相关的命令，添加到系统环境变量路径即可</p><p>解压后当前目录会包含默认的Prometheus配置文件promethes.yml</p><pre class="line-numbers language-none"><code class="language-none">➜  prometheus-2.25.2.darwin-amd64 lsLICENSE           console_libraries prometheus        promtoolNOTICE            consoles          prometheus.yml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Promtheus包含一个时间序列数据库，其采集的数据会以文件的形式存储在本地中，默认的存储路径为data/</p><p>用户也可以通过参数<code>--storage.tsdb.path=&quot;data/&quot;</code>修改本地数据存储的路径</p><h3 id="启动prometheus服务"><a href="#启动prometheus服务" class="headerlink" title="启动prometheus服务"></a>启动prometheus服务</h3><p>其会默认加载当前路径下的prometheus.yaml文件：</p><pre class="line-numbers language-none"><code class="language-none">.&#x2F;prometheus <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>正常的情况下，你可以看到以下输出内容：</p><pre class="line-numbers language-none"><code class="language-none">➜  prometheus-2.25.2.darwin-amd64 .&#x2F;prometheuslevel&#x3D;info ts&#x3D;2021-03-31T06:06:48.254Z caller&#x3D;main.go:366 msg&#x3D;&quot;No time or size retention was set so using the default time retention&quot; duration&#x3D;15dlevel&#x3D;info ts&#x3D;2021-03-31T06:06:48.254Z caller&#x3D;main.go:404 msg&#x3D;&quot;Starting Prometheus&quot; version&#x3D;&quot;(version&#x3D;2.25.2, branch&#x3D;HEAD, revision&#x3D;bda05a23ada314a0b9806a362da39b7a1a4e04c3)&quot;level&#x3D;info ts&#x3D;2021-03-31T06:06:48.254Z caller&#x3D;main.go:409 build_context&#x3D;&quot;(go&#x3D;go1.15.10, user&#x3D;root@de38ec01ef10, date&#x3D;20210316-18:16:26)&quot;level&#x3D;info ts&#x3D;2021-03-31T06:06:48.254Z caller&#x3D;main.go:410 host_details&#x3D;(darwin)level&#x3D;info ts&#x3D;2021-03-31T06:06:48.254Z caller&#x3D;main.go:411 fd_limits&#x3D;&quot;(soft&#x3D;256, hard&#x3D;unlimited)&quot;level&#x3D;info ts&#x3D;2021-03-31T06:06:48.254Z caller&#x3D;main.go:412 vm_limits&#x3D;&quot;(soft&#x3D;unlimited, hard&#x3D;unlimited)&quot;level&#x3D;info ts&#x3D;2021-03-31T06:06:48.256Z caller&#x3D;web.go:532 component&#x3D;web msg&#x3D;&quot;Start listening for connections&quot; address&#x3D;0.0.0.0:9090level&#x3D;info ts&#x3D;2021-03-31T06:06:48.256Z caller&#x3D;main.go:779 msg&#x3D;&quot;Starting TSDB ...&quot;level&#x3D;info ts&#x3D;2021-03-31T06:06:48.258Z caller&#x3D;tls_config.go:191 component&#x3D;web msg&#x3D;&quot;TLS is disabled.&quot; http2&#x3D;falselevel&#x3D;info ts&#x3D;2021-03-31T06:06:48.260Z caller&#x3D;head.go:668 component&#x3D;tsdb msg&#x3D;&quot;Replaying on-disk memory mappable chunks if any&quot;level&#x3D;info ts&#x3D;2021-03-31T06:06:48.260Z caller&#x3D;head.go:682 component&#x3D;tsdb msg&#x3D;&quot;On-disk memory mappable chunks replay completed&quot; duration&#x3D;6.222µslevel&#x3D;info ts&#x3D;2021-03-31T06:06:48.260Z caller&#x3D;head.go:688 component&#x3D;tsdb msg&#x3D;&quot;Replaying WAL, this may take a while&quot;level&#x3D;info ts&#x3D;2021-03-31T06:06:48.260Z caller&#x3D;head.go:740 component&#x3D;tsdb msg&#x3D;&quot;WAL segment loaded&quot; segment&#x3D;0 maxSegment&#x3D;0level&#x3D;info ts&#x3D;2021-03-31T06:06:48.260Z caller&#x3D;head.go:745 component&#x3D;tsdb msg&#x3D;&quot;WAL replay completed&quot; checkpoint_replay_duration&#x3D;37.072µs wal_replay_duration&#x3D;250.379µs total_replay_duration&#x3D;308.367µslevel&#x3D;info ts&#x3D;2021-03-31T06:06:48.261Z caller&#x3D;main.go:799 fs_type&#x3D;1alevel&#x3D;info ts&#x3D;2021-03-31T06:06:48.261Z caller&#x3D;main.go:802 msg&#x3D;&quot;TSDB started&quot;level&#x3D;info ts&#x3D;2021-03-31T06:06:48.261Z caller&#x3D;main.go:928 msg&#x3D;&quot;Loading configuration file&quot; filename&#x3D;prometheus.ymllevel&#x3D;info ts&#x3D;2021-03-31T06:06:50.775Z caller&#x3D;main.go:959 msg&#x3D;&quot;Completed loading of configuration file&quot; filename&#x3D;prometheus.yml totalDuration&#x3D;2.513709691s remote_storage&#x3D;4.524µs web_handler&#x3D;305ns query_engine&#x3D;721ns scrape&#x3D;2.513249415s scrape_sd&#x3D;80.407µs notify&#x3D;65.766µs notify_sd&#x3D;46.36µs rules&#x3D;9.82µslevel&#x3D;info ts&#x3D;2021-03-31T06:06:50.775Z caller&#x3D;main.go:751 msg&#x3D;&quot;Server is ready to receive web requests.&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="采集数据"><a href="#采集数据" class="headerlink" title="采集数据"></a>采集数据</h4><p>若使用Prometheus默认配置文件启动，由于默认配置文件中已经配置了数据采集节点</p><p>这一步可以跳过，直接看<strong>使用Node Exporter采集主机数据</strong></p><pre class="line-numbers language-none"><code class="language-none">scrape_configs:  # The job name is added as a label &#96;job&#x3D;&lt;job_name&gt;&#96; to any timeseries scraped from this config.  - job_name: &#39;prometheus&#39;    # metrics_path defaults to &#39;&#x2F;metrics&#39;    # scheme defaults to &#39;http&#39;.    static_configs:    - targets: [&#39;localhost:9090&#39;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用<code>metrics</code>接口获取采集数据</p><pre class="line-numbers language-none"><code class="language-none">➜  prometheus-2.25.2.darwin-amd64 curl http:&#x2F;&#x2F;localhost:9090&#x2F;metrics# HELP go_gc_duration_seconds A summary of the pause duration of garbage collection cycles.# TYPE go_gc_duration_seconds summarygo_gc_duration_seconds&#123;quantile&#x3D;&quot;0&quot;&#125; 7.5208e-05go_gc_duration_seconds&#123;quantile&#x3D;&quot;0.25&quot;&#125; 0.000109181go_gc_duration_seconds&#123;quantile&#x3D;&quot;0.5&quot;&#125; 0.000141038go_gc_duration_seconds&#123;quantile&#x3D;&quot;0.75&quot;&#125; 0.000168269go_gc_duration_seconds&#123;quantile&#x3D;&quot;1&quot;&#125; 0.00025607go_gc_duration_seconds_sum 0.008501346go_gc_duration_seconds_count 61# HELP go_goroutines Number of goroutines that currently exist.# TYPE go_goroutines gauge<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动完成后，可以通过<a href="http://localhost:9090/">http://localhost:9090</a>访问Prometheus的UI界面：<br><img src="https://aamuqiao.oss-cn-beijing.aliyuncs.com/uPic/O6L7Sd.png" alt="Prometheus"></p><h3 id="使用Node-Exporter采集主机数据"><a href="#使用Node-Exporter采集主机数据" class="headerlink" title="使用Node Exporter采集主机数据"></a>使用Node Exporter采集主机数据</h3><h4 id="安装Node-Exporter"><a href="#安装Node-Exporter" class="headerlink" title="安装Node Exporter"></a>安装Node Exporter</h4><p>在Prometheus的架构设计中，Prometheus Server并不直接服务监控特定的目标，其主要任务负责数据的收集，存储并且对外提供数据查询支持。因此为了能够能够监控到某些东西，如主机的CPU使用率，我们需要使用到Exporter。Prometheus周期性的从Exporter暴露的HTTP服务地址（通常是/metrics）拉取监控样本数据。</p><p>从上面的描述中可以看出Exporter可以是一个相对开放的概念，其可以是一个独立运行的程序独立于监控目标以外，也可以是直接内置在监控目标中。只要能够向Prometheus提供标准格式的监控样本数据即可。</p><p>这里为了能够采集到主机的运行指标如CPU, 内存，磁盘等信息。我们可以使用<a href="https://github.com/prometheus/node_exporter">Node Exporter</a>。</p><p>Node Exporter同样采用Golang编写，并且不存在任何的第三方依赖，只需要下载，解压即可运行。</p><p>本文直接从<a href="https://prometheus.io/download/">官网下载</a></p><h4 id="启动Exporter"><a href="#启动Exporter" class="headerlink" title="启动Exporter"></a>启动Exporter</h4><p>解压，进入目录执行</p><pre class="line-numbers language-none"><code class="language-none">➜  node_exporter-1.1.2.darwin-amd64 lsLICENSE       NOTICE        node_exporter➜  node_exporter-1.1.2.darwin-amd64 .&#x2F;node_exporter<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>访问<a href="http://localhost:9100/">http://localhost:9100/</a>可以看到以下页面<br><img src="https://aamuqiao.oss-cn-beijing.aliyuncs.com/uPic/VFogux.png" alt="http://localhost:9100/"></p><h3 id="监控数据可视化"><a href="#监控数据可视化" class="headerlink" title="监控数据可视化"></a>监控数据可视化</h3><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://juejin.cn/post/6844903938001469453">Prometheus入门实践</a></li><li><a href="https://yunlzheng.gitbook.io/prometheus-book/">Prometheus-book</a></li><li><a href="https://opensource.actionsky.com/20200427-prometheus/">第01期：详解 Prometheus 专栏开篇</a></li><li><a href="https://www.jianshu.com/p/6cc9a5046f17">Prometheus数据采集</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> prometheus </tag>
            
            <tag> 数据库 </tag>
            
            <tag> 监控 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker使用手册</title>
      <link href="2021/03/26/docker-shi-yong-shou-ce/"/>
      <url>2021/03/26/docker-shi-yong-shou-ce/</url>
      
        <content type="html"><![CDATA[<h3 id="利用-Dockerfile-来创建镜像"><a href="#利用-Dockerfile-来创建镜像" class="headerlink" title="利用 Dockerfile 来创建镜像"></a>利用 Dockerfile 来创建镜像</h3><p>使用 <code>docker commit</code> 来扩展一个镜像比较简单，但是不方便在一个团队中分享。我们可以使用 <code>docker build</code>来创建一个新的镜像。为此，首先需要创建一个 <code>Dockerfile</code>，包含一些如何创建镜像的指令。</p><p>新建一个目录和一个 <code>Dockerfile</code></p><pre class="line-numbers language-none"><code class="language-none">$ mkdir sinatra$ cd sinatra$ touch Dockerfile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Dockerfile 中每一条指令都创建镜像的一层，例如：</p><pre class="line-numbers language-none"><code class="language-none"># This is a commentFROM ubuntu:20.04.2MAINTAINER Docker Newbee &lt;newbee@docker.com&gt;RUN apt-get -qq updateRUN apt-get -qqy install ruby ruby-devRUN gem install sinatra<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Dockerfile-基本的语法"><a href="#Dockerfile-基本的语法" class="headerlink" title="Dockerfile 基本的语法"></a>Dockerfile <a href="http://www.dockerinfo.net/dockerfile%e4%bb%8b%e7%bb%8d">基本的语法</a></h4><ul><li>使用<code>#</code>来注释</li><li><code>FROM</code> 指令告诉 <code>Docker</code> 使用哪个镜像作为基础</li><li>接着是维护者的信息</li><li><code>RUN</code>开头的指令会在创建中运行，比如安装一个软件包，在这里使用 <code>apt-get</code> 来安装了一些软件<br>编写完成 <code>Dockerfile</code> 后可以使用 <code>docker build</code> 来生成镜像。<pre class="line-numbers language-none"><code class="language-none"># docker build -t&#x3D;&quot;仓库名:tag&quot; .sudo docker build -t&#x3D;&quot;ouruser&#x2F;sinatra:v2&quot; .➜  sinatra docker build -t&#x3D;&quot;ouruser&#x2F;sinatra:v2&quot; .[+] Building 432.0s (8&#x2F;8) FINISHED &#x3D;&gt; [internal] load build definition from Dockerfile                                                                                                                0.0s &#x3D;&gt; &#x3D;&gt; transferring dockerfile: 215B                                                                                                                                0.0s &#x3D;&gt; [internal] load .dockerignore                                                                                                                                   0.0s &#x3D;&gt; &#x3D;&gt; transferring context: 2B                                                                                                                                     0.0s &#x3D;&gt; [internal] load metadata for docker.io&#x2F;library&#x2F;ubuntu:20.04.2                                                                                                   0.0s &#x3D;&gt; [1&#x2F;4] FROM docker.io&#x2F;library&#x2F;ubuntu:20.04.2                                                                                                                     0.0s &#x3D;&gt; [2&#x2F;4] RUN apt-get -qq update                                                                                                                                   33.8s &#x3D;&gt; [3&#x2F;4] RUN apt-get -qqy install ruby ruby-dev                                                                                                                   68.3s &#x3D;&gt; [4&#x2F;4] RUN gem install sinatra                                                                                                                                 327.8s &#x3D;&gt; exporting to image                                                                                                                                              1.9s &#x3D;&gt; &#x3D;&gt; exporting layers                                                                                                                                             1.9s &#x3D;&gt; &#x3D;&gt; writing image sha256:32d826e013b38ee6a8d80fac491e9f39a59028252bf0aeeffb70db25bcd4a1c4                                                                        0.0s &#x3D;&gt; &#x3D;&gt; naming to docker.io&#x2F;ouruser&#x2F;sinatra:v2                    ➜  sinatra docker imagesREPOSITORY           TAG       IMAGE ID       CREATED         SIZEouruser&#x2F;sinatra      v2        32d826e013b3   2 minutes ago   160MBubuntu               20.04.2   8e428cff54c8   4 hours ago     72.9MB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>其中 -t 标记来添加 tag，指定新的镜像的用户信息。 “.” 是 Dockerfile 所在的路径（当前目录），也可以替换为一个具体的 Dockerfile 的路径。</li></ul><p>可以看到 build 进程在执行操作。它要做的第一件事情就是上传这个 Dockerfile 内容，因为所有的操作都要依据 Dockerfile 来进行。 然后，Dockfile 中的指令被一条一条的执行。每一步都创建了一个新的容器，在容器中执行指令并提交修改（就跟之前介绍过的 docker commit 一样）。当所有的指令都执行完毕之后，返回了最终的镜像 id。所有的中间步骤所产生的容器都被删除和清理了。</p><p>*注意一个镜像不能超过 127 层</p><p>此外，还可以利用 ADD 命令复制本地文件到镜像；用 EXPOSE 命令来向外部开放端口；用 CMD 命令来描述容器启动后运行的程序等。例如</p><pre class="line-numbers language-none"><code class="language-none"># put my local web site in myApp folder to &#x2F;var&#x2F;wwwADD myApp &#x2F;var&#x2F;www# expose httpd portEXPOSE 80# the command to runCMD [&quot;&#x2F;usr&#x2F;sbin&#x2F;apachectl&quot;, &quot;-D&quot;, &quot;FOREGROUND&quot;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="其他配置示例"><a href="#其他配置示例" class="headerlink" title="其他配置示例"></a>其他配置示例</h4><pre class="line-numbers language-none"><code class="language-none">FROM python:3.7-alpine # WORKDIR 工作路径WORKDIR &#x2F;app# COPY 复制文件COPY requirements.txt &#x2F;app# RUN 执行命令RUN pip3 install -r requirements.txt --no-cache-dirCOPY . &#x2F;app ENTRYPOINT [&quot;python3&quot;] # CMD [&quot;app.py&quot;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="docker-run-常用参数"><a href="#docker-run-常用参数" class="headerlink" title="docker run 常用参数"></a>docker run 常用参数</h3><pre class="line-numbers language-none"><code class="language-none">-i以交互模式运行容器，通常与 -t 同时使用；-t为容器重新分配一个伪输入终端，通常与 -i 同时使用；-d后台运行容器，并返回容器ID；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://www.docker.org.cn/book/docker/what-is-docker-16.html">Docker入门教程</a></li><li><a href="http://www.dockerinfo.net/document">Docker中文文档</a></li><li><a href="https://hujb2000.gitbooks.io/docker-flow-evolution/content/cn/index.html">Docker入门与实践</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker命令大全</title>
      <link href="2021/03/26/docker-ming-ling-da-quan/"/>
      <url>2021/03/26/docker-ming-ling-da-quan/</url>
      
        <content type="html"><![CDATA[<h3 id="容器生命周期管理"><a href="#容器生命周期管理" class="headerlink" title="容器生命周期管理"></a>容器生命周期管理</h3><ul><li>run</li><li>start/stop/restart</li><li>kill</li><li>rm</li><li>pause/unpause</li><li>create</li><li>exec<h3 id="容器操作"><a href="#容器操作" class="headerlink" title="容器操作"></a>容器操作</h3></li><li>ps</li><li>inspect</li><li>top</li><li>attach</li><li>events</li><li>logs</li><li>wait</li><li>export</li><li>port<h3 id="容器rootfs命令"><a href="#容器rootfs命令" class="headerlink" title="容器rootfs命令"></a>容器rootfs命令</h3></li><li>commit</li><li>cp</li><li>diff<h3 id="镜像仓库"><a href="#镜像仓库" class="headerlink" title="镜像仓库"></a>镜像仓库</h3></li><li>login</li><li>pull</li><li>push</li><li>search<h3 id="本地镜像管理"><a href="#本地镜像管理" class="headerlink" title="本地镜像管理"></a>本地镜像管理</h3></li><li>images</li><li>rmi</li><li>tag</li><li>build</li><li>history</li><li>save</li><li>load</li><li>import</li><li>info|version</li><li>info</li><li>version</li></ul><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><h4 id="docker镜像列表存在但删除显示-No-such-image问题解决"><a href="#docker镜像列表存在但删除显示-No-such-image问题解决" class="headerlink" title="docker镜像列表存在但删除显示 No such image问题解决"></a>docker镜像列表存在但删除显示 No such image问题解决</h4><ol><li>停掉容器（docker stop 容器ID或容器名称）</li><li>删除容器（docker rm 容器ID或容器名称）</li><li>删除镜像（docker rmi 镜像ID或镜像名称:版本号）</li></ol><h4 id="docker-run-启动容器"><a href="#docker-run-启动容器" class="headerlink" title="docker run 启动容器"></a>docker run 启动容器</h4><pre class="line-numbers language-none"><code class="language-none">-i以交互模式运行容器，通常与 -t 同时使用；-t为容器重新分配一个伪输入终端，通常与 -i 同时使用；-d后台运行容器，并返回容器ID；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://www.runoob.com/docker/docker-command-manual.html">Docker 命令大全</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker入门手册</title>
      <link href="2021/03/25/docker-ru-men-shou-ce/"/>
      <url>2021/03/25/docker-ru-men-shou-ce/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文发布在docker中文论坛上，归纳整理一遍</p></blockquote><h3 id="docker-快速入门"><a href="#docker-快速入门" class="headerlink" title="docker 快速入门"></a>docker 快速入门</h3><h4 id="什么是Docker"><a href="#什么是Docker" class="headerlink" title="什么是Docker?"></a>什么是Docker?</h4><blockquote><p>简介：Docker是一个开源的引擎，可以轻松的为任何应用创建一个轻量级的、可移植的、自给自足的容器。开发者在笔记本上编译测试通过的容器可以批量地在生产环境中部署，包括VMs（虚拟机）、bare metal、OpenStack 集群和其他的基础应用平台。</p></blockquote><p>Docker是一个开源的引擎，可以轻松的为任何应用创建一个轻量级的、可移植的、自给自足的容器。开发者在笔记本上编译测试通过的容器可以批量地在生产环境中部署，包括VMs（虚拟机）、 bare metal、OpenStack 集群和其他的基础应用平台。 </p><p>Docker通常用于如下场景：</p><ul><li>web应用的自动化打包和发布；</li><li>自动化测试和持续集成、发布；</li><li>在服务型环境中部署和调整数据库或其他的后台应用；</li><li>从头编译或者扩展现有的OpenShift或Cloud</li><li>Foundry平台来搭建自己的PaaS环境。</li></ul><h4 id="2-关于docker入门教程"><a href="#2-关于docker入门教程" class="headerlink" title="2.关于docker入门教程"></a>2.关于docker入门教程</h4><p>docker入门教程翻译自docker官方网站的Docker getting started 教程，官方网站： <a href="https://docs.docker.com/linux/started/">https://docs.docker.com/linux/started/</a></p><p>官方网站是一个交互的教程，在左侧是相应的说明，右侧是一个交互的终端，输入预期的目录，可以跳到下一步，大家可以参考我们的翻译，在官网上面运行相应的命令，以验证效果。</p><h4 id="3-准备"><a href="#3-准备" class="headerlink" title="3.准备"></a>3.准备</h4><blockquote><p>简介：Docker系统有两个程序：docker服务端和docker客户端。其中docker服务端是一个服务进程，管理着所有的容器。</p></blockquote><p>准备开始</p><p>Docker系统有两个程序：docker服务端和docker客户端。其中docker服务端是一个服务进程，管理着所有的容器。docker客户端则扮演着docker服务端的远程控制器，可以用来控制docker的服务端进程。大部分情况下，docker服务端和客户端运行在一台机器上。</p><p>目标：</p><p>检查docker的版本，这样可以用来确认docker服务在运行并可通过客户端链接。</p><p>提示：</p><ul><li>可以通过在终端输入docker命令来查看所有的参数。</li><li>官网的在线模拟器只提供了有限的命令，无法保证所有的命令可以正确执行。</li></ul><p>正确的命令：<code>docker version</code></p><pre class="line-numbers language-none"><code class="language-none">✗ docker versionClient: Docker Engine - Community Cloud integration: 1.0.9 Version:           20.10.5 API version:       1.41 Go version:        go1.13.15 Git commit:        55c4c88 Built:             Tue Mar  2 20:13:00 2021 OS&#x2F;Arch:           darwin&#x2F;amd64 Context:           default Experimental:      trueServer: Docker Engine - Community Engine:  Version:          20.10.5  API version:      1.41 (minimum version 1.12)  Go version:       go1.13.15  Git commit:       363e9a8  Built:            Tue Mar  2 20:15:47 2021  OS&#x2F;Arch:          linux&#x2F;amd64  Experimental:     true containerd:  Version:          1.4.3  GitCommit:        269548fa27e0089a8b8278fc4fc781d7f65a939b runc:  Version:          1.0.0-rc92  GitCommit:        ff819c7e9184c13b7c2607fe6c30ae19403a7aff docker-init:  Version:          0.19.0  GitCommit:        de40ad0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-搜索可用docker镜像"><a href="#4-搜索可用docker镜像" class="headerlink" title="4.搜索可用docker镜像"></a>4.搜索可用docker镜像</h4><blockquote><p>简介：这一步的目标是学会使用docker search命令来检索可用镜像。</p></blockquote><p>搜索可用的docker镜像</p><p>使用docker最简单的方式莫过于从现有的容器镜像开始。Docker官方网站专门有一个页面来存储所有可用的镜像，网址是： index.docker.io。你可以通过浏览这个网页来查找你想要使用的镜像，或者使用命令行的工具来检索。</p><p>目标：</p><p>学会使用命令行的工具来检索名字叫做tutorial的镜像。</p><p>提示：</p><p>命令行的格式为：docker search 镜像名字</p><p>正确的命令：<code>docker search tutorial</code></p><pre class="line-numbers language-none"><code class="language-none"> ✗ docker search tutorialNAME                                             DESCRIPTION                                     STARS     OFFICIAL   AUTOMATEDlearn&#x2F;tutorial                                                                                   42fiware&#x2F;tutorials.tourguide-app                   FIWARE Tour Guide App sample application        2                    [OK]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-下载容器镜像"><a href="#5-下载容器镜像" class="headerlink" title="5.下载容器镜像"></a>5.下载容器镜像</h4><blockquote><p>简介：学会使用docker pull命令下载一个镜像。</p></blockquote><p>学会使用docker命令来下载镜像</p><p>下载镜像的命令非常简单，使用docker pull命令即可。(译者按：docker命令和git有一些类似的地方）。在docker的镜像索引网站上面，镜像都是按照 <strong>用户名/ 镜像名</strong>的方式来存储的。有一组比较特殊的镜像，比如ubuntu这类基础镜像，经过官方的验证，值得信任，可以直接用 <strong>镜像名</strong>来检索到。</p><p>目标：</p><p>通过docker命令下载tutorial镜像。</p><p>提示：</p><p>执行pull命令的时候要写完整的名字，比如”learn/tutorial”。</p><p>正确的命令：<code>docker pull learn/tutorial</code></p><h4 id="6-在docker容器中运行hello-world"><a href="#6-在docker容器中运行hello-world" class="headerlink" title="6.在docker容器中运行hello world!"></a>6.在docker容器中运行hello world!</h4><blockquote><p>简介：通过docker run命令可以启动某一个镜像，并运行一个命令。</p></blockquote><p>在docker容器中运行hello world!</p><p>docker容器可以理解为在沙盒中运行的进程。这个沙盒包含了该进程运行所必须的资源，包括文件系统、系统类库、shell 环境等等。但这个沙盒默认是不会运行任何程序的。你需要在沙盒中运行一个进程来启动某一个容器。这个进程是该容器的唯一进程，所以当该进程结束的时候，容器也会完全的停止。</p><p>目标：</p><p>在我们刚刚下载的镜像中输出”hello word”。为了达到这个目的，我们需要在这个容器中运行”echo”命令，输出”hello word”。</p><p>提示：</p><p>docker run命令有两个参数，一个是镜像名，一个是要在镜像中运行的命令。</p><p>正确的命令：<code>docker run learn/tutorial echo &quot;hello word&quot;</code></p><pre class="line-numbers language-none"><code class="language-none"> ✗ docker run learn&#x2F;tutorial echo &quot;hello word&quot;WARNING: The requested image&#39;s platform (unknown) does not match the detected host platform (linux&#x2F;amd64) and no specific platform was requestedhello word<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="7-在容器中安装新的程序"><a href="#7-在容器中安装新的程序" class="headerlink" title="7.在容器中安装新的程序"></a>7.在容器中安装新的程序</h4><blockquote><p>简介：在docker容器中安装新的程序。</p></blockquote><p>在容器中安装新的程序</p><p>下一步我们要做的事情是在容器里面安装一个简单的程序(ping)。我们之前下载的tutorial镜像是基于ubuntu的，所以你可以使用ubuntu的apt-get命令来安装ping程序： apt-get install -y ping。</p><p>备注：apt-get 命令执行完毕之后，容器就会停止，但对容器的改动不会丢失。</p><p>目标：</p><p>在learn/tutorial镜像里面安装ping程序。</p><p>提示：</p><p>在执行apt-get 命令的时候，要带上-y参数。如果不指定-y参数的话，apt-get命令会进入交互模式，需要用户输入命令来进行确认，但在docker环境中是无法响应这种交互的。</p><p>正确的命令：<code>docker run learn/tutorial apt-get install -y ping</code></p><h4 id="8-保存对容器的修改"><a href="#8-保存对容器的修改" class="headerlink" title="8.保存对容器的修改"></a>8.保存对容器的修改</h4><blockquote><p>简介：通过docker commit命令保存对容器的修改</p></blockquote><p>保存对容器的修改</p><p>当你对某一个容器做了修改之后（通过在容器中运行某一个命令），可以把对容器的修改保存下来，这样下次可以从保存后的最新状态运行该容器。docker中保存状态的过程称之为committing，它保存的新旧状态之间的区别，从而产生一个新的版本。</p><p>目标：</p><p>首先使用 docker ps -l命令获得安装完ping命令之后容器的id。然后把这个镜像保存为learn/ping。</p><p>提示：</p><ol><li>运行docker commit，可以查看该命令的参数列表。</li><li>你需要指定要提交保存容器的ID。(译者按：通过docker ps -l 命令获得)</li><li>无需拷贝完整的id，通常来讲最开始的三至四个字母即可区分。（译者按：非常类似git里面的版本号)</li></ol><p>正确的命令：<br>$ docker commit 46e learn/ping</p><pre class="line-numbers language-none"><code class="language-none"> ✗ docker ps -lCONTAINER ID   IMAGE            COMMAND                  CREATED              STATUS                          PORTS     NAMES46e2ce790513   learn&#x2F;tutorial   &quot;apt-get install -y …&quot;   About a minute ago   Exited (0) About a minute ago             flamboyant_ramanujan✗ docker commit 46e learn&#x2F;pingsha256:968d45d2b4f4fa2dc9a52ee01ce420b08b3efe676fd17787735bc5c18143c41f<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行完docker commit命令之后，会返回sha256。</p><h4 id="9-运行新的镜像"><a href="#9-运行新的镜像" class="headerlink" title="9.运行新的镜像"></a>9.运行新的镜像</h4><blockquote><p>简介：对一个镜像提交修改之后，就可以运行它里面新安装的命令了。</p></blockquote><p>运行新的镜像</p><p>ok，到现在为止，你已经建立了一个完整的、自成体系的docker环境，并且安装了ping命令在里面。它可以在任何支持docker环境的系统中运行啦！(译者按：是不是很神奇呢？)让我们来体验一下吧！</p><p>目标：</p><p>在新的镜像中运行ping <a href="http://www.google.com命令./">www.google.com命令。</a></p><p>提示：</p><p>一定要使用新的镜像名 learn/ping来运行ping命令。(译者按：最开始下载的learn/tutorial镜像中是没有ping命令的)</p><p>正确的命令：<br>$ docker run lean/ping ping <a href="http://www.google.com/">www.google.com</a></p><h4 id="10-检查运行中的镜像"><a href="#10-检查运行中的镜像" class="headerlink" title="10.检查运行中的镜像"></a>10.检查运行中的镜像</h4><blockquote><p>简介：使用docker ps命令可以查看所有正在运行中的容器列表，使用docker inspect命令我们可以查看更详细的关于某一个容器的信息。</p></blockquote><p>检查运行中的镜像</p><p>现在你已经运行了一个docker容器，让我们来看下正在运行的容器。</p><p>使用 docker ps命令可以查看所有正在运行中的容器列表，使用 docker inspect命令我们可以查看更详细的关于某一个容器的信息。</p><p>目标：</p><p>查找某一个运行中容器的id，然后使用docker inspect命令查看容器的信息。</p><p>提示：</p><p>可以使用镜像id的前面部分，不需要完整的id。</p><p>正确的命令：</p><pre class="line-numbers language-none"><code class="language-none">$ docker inspect efe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="11-发布自己的镜像"><a href="#11-发布自己的镜像" class="headerlink" title="11.发布自己的镜像"></a>11.发布自己的镜像</h4><blockquote><p>简介：我们也可以把我们自己编译的镜像发布到索引页面，一方面可以自己重用，另一方面也可以分享给其他人使用。</p></blockquote><p>发布docker镜像</p><p>现在我们已经验证了新镜像可以正常工作，下一步我们可以将其发布到官方的索引网站。还记得我们最开始下载的learn/tutorial镜像吧，我们也可以把我们自己编译的镜像发布到索引页面，一方面可以自己重用，另一方面也可以分享给其他人使用。</p><p>目标：</p><p>把learn/ping镜像发布到docker的index网站。</p><p>提示：<br>1.docker images命令可以列出所有安装过的镜像。<br>2.docker push命令可以将某一个镜像发布到官方网站。<br>3.你只能将镜像发布到自己的空间下面。这个模拟器登录的是learn帐号。</p><p>预期的命令：</p><pre class="line-numbers language-none"><code class="language-none">$ docker push learn&#x2F;ping<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="12-知识点整理"><a href="#12-知识点整理" class="headerlink" title="12.知识点整理"></a>12.知识点整理</h4><pre class="line-numbers language-none"><code class="language-none"># 查看docker版本docker version# 搜索可用docker镜像$ docker search tutorial# 下载容器镜像$ docker pull learn&#x2F;tutorial# 在docker容器中运行hello world!$ docker run learn&#x2F;tutorial echo &quot;hello word&quot;# 在容器中安装新的程序$ docker run learn&#x2F;tutorial apt-get install -y ping# 查看被修改的容器 ：$ docker ps -l#提交指定容器保存为新的镜像： $ docker commit &lt;container id&gt; &lt;new image name&gt;# 显示本地已有的镜像docker images# 使用下载的镜像启动容器$ sudo docker run -t -i training&#x2F;sinatra &#x2F;bin&#x2F;bash# 检查运行中的镜像$ docker inspect efe# 发布自己的镜像$ $ docker push learn&#x2F;ping<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://www.docker.org.cn/book/docker/what-is-docker-16.html">Docker入门教程</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker部署flask服务</title>
      <link href="2021/03/25/docker-bu-shu-flask-fu-wu/"/>
      <url>2021/03/25/docker-bu-shu-flask-fu-wu/</url>
      
        <content type="html"><![CDATA[<blockquote><p>docker部署flask服务示例</p></blockquote><span id="more"></span><p>首先推荐阅读Flask 官方文档<a href="https://dormousehole.readthedocs.io/en/latest/">欢迎来到 Flask 的世界</a>快速了解Flask架构</p><h3 id="快速搭建一个flask服务"><a href="#快速搭建一个flask服务" class="headerlink" title="快速搭建一个flask服务"></a>快速搭建一个flask服务</h3><p>一个最小的应用</p><pre class="line-numbers language-none"><code class="language-none">from flask import Flaskapp &#x3D; Flask(__name__)@app.route(&#39;&#x2F;&#39;)def hello():return &quot;Hello World!&quot;if __name__ &#x3D;&#x3D; &#39;__main__&#39;:app.run(host&#x3D;&#39;0.0.0.0&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行demo</p><pre class="line-numbers language-none"><code class="language-none">$ export FLASK_APP&#x3D;app.py$ flask run * Running on http:&#x2F;&#x2F;127.0.0.1:5000&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>或者<code>python -m flask</code></p><pre class="line-numbers language-none"><code class="language-none">$ export FLASK_APP&#x3D;app.py$ python -m flask run * Running on http:&#x2F;&#x2F;127.0.0.1:5000&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-none"><code class="language-none">✗ python3 app.py * Serving Flask app &quot;app&quot; (lazy loading) * Environment: production   WARNING: This is a development server. Do not use it in a production deployment.   Use a production WSGI server instead. * Debug mode: off * Running on http:&#x2F;&#x2F;0.0.0.0:5000&#x2F; (Press CTRL+C to quit)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>外部可见的服务器</p><pre class="line-numbers language-none"><code class="language-none">flask run --host&#x3D;0.0.0.0  # 可以让服务器被公开访问<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>调试模式</p><pre class="line-numbers language-none"><code class="language-none"># 如果需要打开所有开发功能（包括调试模式），那么要在运行服务器之前导出 FLASK_ENV 环境变量并把其设置为 development$ export FLASK_ENV&#x3D;development$ flask run<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="项目文件"><a href="#项目文件" class="headerlink" title="项目文件"></a>项目文件</h3><p><a href="https://github.com/docker/awesome-compose/tree/master/flask">代码示例下载</a></p><pre class="line-numbers language-none"><code class="language-none">.├── README.md├── app│   ├── Dockerfile│   ├── app.py│   └── requirements.txt└── docker-compose.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="docker-部署服务"><a href="#docker-部署服务" class="headerlink" title="docker 部署服务"></a>docker 部署服务</h3><pre class="line-numbers language-none"><code class="language-none"> ✗ cd flask-demo&#x2F;app ✗ docker build -t&#x3D;&quot;flask-demo:v1&quot; .[+] Building 26.3s (11&#x2F;11) FINISHED &#x3D;&gt; [internal] load build definition from Dockerfile                                                                                                                0.0s &#x3D;&gt; &#x3D;&gt; transferring dockerfile: 296B                                                                                                                                0.0s &#x3D;&gt; [internal] load .dockerignore                                                                                                                                   0.0s &#x3D;&gt; &#x3D;&gt; transferring context: 2B                                                                                                                                     0.0s &#x3D;&gt; [internal] load metadata for docker.io&#x2F;library&#x2F;python:3.7-alpine                                                                                               26.1s &#x3D;&gt; [auth] library&#x2F;python:pull token for registry-1.docker.io                                                                                                       0.0s &#x3D;&gt; [internal] load build context                                                                                                                                   0.0s &#x3D;&gt; &#x3D;&gt; transferring context: 697B                                                                                                                                   0.0s &#x3D;&gt; [1&#x2F;5] FROM docker.io&#x2F;library&#x2F;python:3.7-alpine@sha256:39ad96c8188f69d513ded616433396a9ab90e061ca85d8eacf6514fa27ec3d40                                          0.0s &#x3D;&gt; &#x3D;&gt; resolve docker.io&#x2F;library&#x2F;python:3.7-alpine@sha256:39ad96c8188f69d513ded616433396a9ab90e061ca85d8eacf6514fa27ec3d40                                          0.0s &#x3D;&gt; CACHED [2&#x2F;5] WORKDIR &#x2F;app                                                                                                                                       0.0s &#x3D;&gt; CACHED [3&#x2F;5] COPY requirements.txt &#x2F;app                                                                                                                         0.0s &#x3D;&gt; CACHED [4&#x2F;5] RUN pip3 install -r requirements.txt --no-cache-dir                                                                                                0.0s &#x3D;&gt; [5&#x2F;5] COPY . &#x2F;app                                                                                                                                               0.1s &#x3D;&gt; exporting to image                                                                                                                                              0.0s &#x3D;&gt; &#x3D;&gt; exporting layers                                                                                                                                             0.0s &#x3D;&gt; &#x3D;&gt; writing image sha256:9fc116d3008819bf171b4cb2a10957e842b77aa24bde2582d737040cd6f9eaec                                                                        0.0s &#x3D;&gt; &#x3D;&gt; naming to docker.io&#x2F;library&#x2F;flask-demo:v1   ✗ docker imagesREPOSITORY           TAG       IMAGE ID       CREATED         SIZEflask-demo           v1        9fc116d30088   3 minutes ago   51.6MB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动容器</p><ul><li><code>-p </code>指定端口映射，格式为：主机(宿主)端口:容器端口</li><li><code>-d</code>: 后台运行容器，并返回容器ID；</li><li><code>-i</code>: 以交互模式运行容器，通常与 -t 同时使用；</li><li><code>-P</code>: 随机端口映射，容器内部端口随机映射到主机的端口</li><li><code>-p</code>: 指定端口映射，格式为：主机(宿主)端口:容器端口</li><li><code>-t</code>: 为容器重新分配一个伪输入终端，通常与 -i 同时使用；<pre class="line-numbers language-none"><code class="language-none">✗ docker run -d -p 5000:5000 flask-demo:v1* Serving Flask app &quot;app&quot; (lazy loading)* Environment: production  WARNING: This is a development server. Do not use it in a production deployment.  Use a production WSGI server instead.* Debug mode: off* Running on http:&#x2F;&#x2F;0.0.0.0:5000&#x2F; (Press CTRL+C to quit)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://aamuqiao.oss-cn-beijing.aliyuncs.com/uPic/r1MVwF.png" alt="hello world"></li></ul><p>打开浏览器输入<a href="localhost:5000">localhost:5000</a></p><p>关闭容器</p><pre class="line-numbers language-none"><code class="language-none">✗ docker psCONTAINER ID   IMAGE           COMMAND            CREATED              STATUS          PORTS                    NAMES8c87f5f494b8   flask-demo:v1   &quot;python3 app.py&quot;   About a minute ago   Up 10 seconds   0.0.0.0:5000-&gt;5000&#x2F;tcp   nervous_bassi(venv) ➜  app git:(main) ✗ docker stop 8c87f5f494b88c87f5f494b8(venv) ➜  app git:(main) ✗ docker start 8c87f5f494b88c87f5f494b8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="docker-compose-部署服务"><a href="#docker-compose-部署服务" class="headerlink" title="docker-compose 部署服务"></a><a href="http://www.dockerinfo.net/docker-compose-%e9%a1%b9%e7%9b%ae">docker-compose</a> 部署服务</h3><blockquote><p>Docker Compose 是 Docker 官方编排（Orchestration）项目之一，负责快速在集群中部署分布式应用。</p></blockquote><pre class="line-numbers language-none"><code class="language-none">✗ docker-compose upBuilding web[+] Building 16.4s (11&#x2F;11) FINISHED &#x3D;&gt; [internal] load build definition from Dockerfile                                                                                                                0.0s &#x3D;&gt; &#x3D;&gt; transferring dockerfile: 120B                                                                                                                                0.0s &#x3D;&gt; [internal] load .dockerignore                                                                                                                                   0.0s &#x3D;&gt; &#x3D;&gt; transferring context: 2B                                                                                                                                     0.0s &#x3D;&gt; [internal] load metadata for docker.io&#x2F;library&#x2F;python:3.7-alpine                                                                                               16.3s &#x3D;&gt; [auth] library&#x2F;python:pull token for registry-1.docker.io                                                                                                       0.0s &#x3D;&gt; [internal] load build context                                                                                                                                   0.0s &#x3D;&gt; &#x3D;&gt; transferring context: 505B                                                                                                                                   0.0s &#x3D;&gt; [1&#x2F;5] FROM docker.io&#x2F;library&#x2F;python:3.7-alpine@sha256:39ad96c8188f69d513ded616433396a9ab90e061ca85d8eacf6514fa27ec3d40                                          0.0s &#x3D;&gt; &#x3D;&gt; resolve docker.io&#x2F;library&#x2F;python:3.7-alpine@sha256:39ad96c8188f69d513ded616433396a9ab90e061ca85d8eacf6514fa27ec3d40                                          0.0s &#x3D;&gt; CACHED [2&#x2F;5] WORKDIR &#x2F;app                                                                                                                                       0.0s &#x3D;&gt; CACHED [3&#x2F;5] COPY requirements.txt &#x2F;app                                                                                                                         0.0s &#x3D;&gt; CACHED [4&#x2F;5] RUN pip3 install -r requirements.txt --no-cache-dir                                                                                                0.0s &#x3D;&gt; CACHED [5&#x2F;5] COPY . &#x2F;app                                                                                                                                        0.0s &#x3D;&gt; exporting to image                                                                                                                                              0.0s &#x3D;&gt; &#x3D;&gt; exporting layers                                                                                                                                             0.0s &#x3D;&gt; &#x3D;&gt; writing image sha256:9fc116d3008819bf171b4cb2a10957e842b77aa24bde2582d737040cd6f9eaec                                                                        0.0s &#x3D;&gt; &#x3D;&gt; naming to docker.io&#x2F;library&#x2F;flask-demo_web                                                                                                                   0.0sSuccessfully built 9fc116d3008819bf171b4cb2a10957e842b77aa24bde2582d737040cd6f9eaecWARNING: Image for service web was built because it did not already exist. To rebuild this image you must use &#96;docker-compose build&#96; or &#96;docker-compose up --build&#96;.Creating flask-demo_web_1 ... doneAttaching to flask-demo_web_1web_1  |  * Serving Flask app &quot;app&quot; (lazy loading)web_1  |  * Environment: productionweb_1  |    WARNING: This is a development server. Do not use it in a production deployment.web_1  |    Use a production WSGI server instead.web_1  |  * Debug mode: offweb_1  |  * Running on http:&#x2F;&#x2F;0.0.0.0:5000&#x2F; (Press CTRL+C to quit)^CGracefully stopping... (press Ctrl+C again to force)Stopping flask-demo_web_1 ... done(venv) ➜  flask-demo git:(main) ✗ docker ps -aCONTAINER ID   IMAGE                COMMAND                  CREATED          STATUS                        PORTS                    NAMES2e48108b8e1d   flask-demo_web       &quot;python3 app.py&quot;         6 minutes ago    Exited (137) 9 seconds ago                             flask-demo_web_1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>ctrl+c</code>终止服务,使用<code>docker ps -a</code>查看所有容器，再次启动容器使用<code>docker start 容器id</code></p><pre class="line-numbers language-none"><code class="language-none">✗ docker start 2e48108b8e1d2e48108b8e1d(venv) ➜  flask-demo git:(main) ✗ docker psCONTAINER ID   IMAGE            COMMAND            CREATED         STATUS          PORTS                    NAMES2e48108b8e1d   flask-demo_web   &quot;python3 app.py&quot;   9 minutes ago   Up 16 seconds   0.0.0.0:5000-&gt;5000&#x2F;tcp   flask-demo_web_1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>up参数</p><ul><li>构建，（重新）创建，启动，链接一个服务相关的容器。</li><li>链接的服务都将会启动，除非他们已经运行。</li><li>默认情况， <code>docker-compose up</code> 将会整合所有容器的输出，并且退出时，所有容器将会停止。</li><li>如果使用 <code>docker-compose up -d</code> ，将会在后台启动并运行所有的容器。</li><li>默认情况，如果该服务的容器已经存在， <code>docker-compose up</code> 将会停止并尝试重新创建他们（保持使用<code>volumes-from</code> 挂载的卷），以保证 <code>docker-compose.yml</code> 的修改生效。如果你不想容器被停止并重新创建，可以使用 <code>docker-compose up --no-recreate</code>。如果需要的话，这样将会启动已经停止的容器。</li></ul><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://github.com/docker/awesome-compose">一些docker-compose 部署示例</a></li><li><a href="https://github.com/docker/awesome-compose/tree/master/flask">docker-compose部署flask</a> </li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git操作手册</title>
      <link href="2021/03/24/git-cao-zuo-shou-ce/"/>
      <url>2021/03/24/git-cao-zuo-shou-ce/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Git 常用操作示例</p></blockquote><span id="more"></span><h3 id="添加远程仓库"><a href="#添加远程仓库" class="headerlink" title="添加远程仓库"></a>添加远程仓库</h3><pre class="line-numbers language-none"><code class="language-none">git remote add origin git@github.com:michaelliao&#x2F;learngit.git  git push -u origin master  向master 分支推送<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="删除本地分支-远程分支"><a href="#删除本地分支-远程分支" class="headerlink" title="删除本地分支|远程分支"></a>删除本地分支|远程分支</h3><ul><li>删除远程分支(推送一个空分支)<pre class="line-numbers language-none"><code class="language-none">git push origin :issue_101 删除远程分支<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="远程分支管理"><a href="#远程分支管理" class="headerlink" title="远程分支管理"></a>远程分支管理</h3><pre class="line-numbers language-none"><code class="language-none">git branch -a # 查看所有本地分支和远程分支git branch -r # 只查看远程分支git remote prune origin # 发现很多在远程仓库已经删除的分支在本地依然可以看到,删除远程不存在的分支git remote show origin # 查看remote地址，远程分支，还有本地分支与之相对应关系等信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="设置默认推送远程分支"><a href="#设置默认推送远程分支" class="headerlink" title="设置默认推送远程分支"></a>设置默认推送远程分支</h3><pre class="line-numbers language-none"><code class="language-none"># 将本地分支与远程分支进行关联# 设置git push&#x2F;pull 默认推送远程分支 git branch --set-upstream-to&#x3D;origin&#x2F;&lt;远端分支&gt; &lt;本地分支&gt;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="删除远程不存在的分支"><a href="#删除远程不存在的分支" class="headerlink" title="删除远程不存在的分支"></a>删除远程不存在的分支</h3><p>使用<code>git branch -a</code>命令可以查看所有本地分支和远程分支（<code>git branch -r</code>可以只查看远程分支）<br>发现很多在远程仓库已经删除的分支在本地依然可以看到。</p><pre class="line-numbers language-none"><code class="language-none">$ git branch -a  feature-account-resell  feature-code-refactor  feature-crontab  feature-data-source  feature-utf8* master  remotes&#x2F;origin&#x2F;HEAD -&gt; origin&#x2F;master  remotes&#x2F;origin&#x2F;feature-account-resell  remotes&#x2F;origin&#x2F;feature-add-faka  remotes&#x2F;origin&#x2F;feature-code-refactor  remotes&#x2F;origin&#x2F;feature-crontab  remotes&#x2F;origin&#x2F;feature-data-source  remotes&#x2F;origin&#x2F;feature-ias  remotes&#x2F;origin&#x2F;feature-utf8  remotes&#x2F;origin&#x2F;master  remotes&#x2F;origin&#x2F;zengjinping<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用命令 <code>git remote show origin</code>，可以查看<code>remote</code>地址，远程分支，还有本地分支与之相对应关系等信息。</p><pre class="line-numbers language-none"><code class="language-none">$ git remote show origin* remote origin  Fetch URL: git@wangqiao.threathunter.cn:alert&#x2F;SaleCardScript.git  Push  URL: git@wangqiao.threathunter.cn:alert&#x2F;SaleCardScript.git  HEAD branch: master  Remote branches:    feature-add-faka                           tracked    feature-ias                                tracked    master                                     tracked    refs&#x2F;remotes&#x2F;origin&#x2F;feature-account-resell stale (use &#39;git remote prune&#39; to remove)    refs&#x2F;remotes&#x2F;origin&#x2F;feature-code-refactor  stale (use &#39;git remote prune&#39; to remove)    refs&#x2F;remotes&#x2F;origin&#x2F;feature-crontab        stale (use &#39;git remote prune&#39; to remove)    refs&#x2F;remotes&#x2F;origin&#x2F;feature-data-source    stale (use &#39;git remote prune&#39; to remove)    refs&#x2F;remotes&#x2F;origin&#x2F;feature-utf8           stale (use &#39;git remote prune&#39; to remove)    zengjinping                                tracked  Local branches configured for &#39;git pull&#39;:    feature-account-resell merges with remote feature-account-resell    feature-code-refactor  merges with remote feature-code-refactor    feature-crontab        merges with remote feature-crontab    feature-data-source    merges with remote feature-data-source    feature-utf8           merges with remote feature-utf8    master                 merges with remote master  Local ref configured for &#39;git push&#39;:    master pushes to master (up to date)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时我们可以看到那些远程仓库已经不存在的分支，根据提示，使用 <code>git remote prune origin</code> 命令</p><pre class="line-numbers language-none"><code class="language-none">$ git remote prune originPruning originURL: git@wangqiao.threathunter.cn:alert&#x2F;SaleCardScript.git * [pruned] origin&#x2F;feature-account-resell * [pruned] origin&#x2F;feature-code-refactor * [pruned] origin&#x2F;feature-crontab * [pruned] origin&#x2F;feature-data-source * [pruned] origin&#x2F;feature-utf8(venv) [user_00@test-env &#x2F;data&#x2F;server&#x2F;SaleCardScript]$ (venv) [user_00@test-env &#x2F;data&#x2F;server&#x2F;SaleCardScript]$ git branch -a  feature-account-resell  feature-code-refactor  feature-crontab  feature-data-source  feature-utf8* master  remotes&#x2F;origin&#x2F;HEAD -&gt; origin&#x2F;master  remotes&#x2F;origin&#x2F;feature-add-faka  remotes&#x2F;origin&#x2F;feature-ias  remotes&#x2F;origin&#x2F;master  remotes&#x2F;origin&#x2F;zengjinping<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样就删除了那些远程仓库不存在的分支。</p><h3 id="删除已提交的-需要被忽略-的文件"><a href="#删除已提交的-需要被忽略-的文件" class="headerlink" title="删除已提交的(需要被忽略)的文件"></a>删除已提交的(需要被忽略)的文件</h3><pre class="line-numbers language-none"><code class="language-none">1.在终端输入;git rm -r --cached 要删除的文件名,如:git rm -r --cached .idea--cached 只删远程仓库的文件,不会删除本地的2.提交操作记录描述git commit -m &#39;删除XX文件&#39;3.推送到远程仓库git push -u origin master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="更新被拒绝，因为您当前分支的最新提交落后于其对应的远程分支"><a href="#更新被拒绝，因为您当前分支的最新提交落后于其对应的远程分支" class="headerlink" title="更新被拒绝，因为您当前分支的最新提交落后于其对应的远程分支"></a>更新被拒绝，因为您当前分支的最新提交落后于其对应的远程分支</h3><pre class="line-numbers language-none"><code class="language-none">$ git pushTo github.com:amuqiao&#x2F;amuqiao.github.io.git ! [rejected]        hexo -&gt; hexo (non-fast-forward)error: 推送一些引用到 &#39;github.com:amuqiao&#x2F;amuqiao.github.io.git&#39; 失败提示：更新被拒绝，因为您当前分支的最新提交落后于其对应的远程分支。提示：再次推送前，先与远程变更合并（如 &#39;git pull ...&#39;）。详见提示：&#39;git push --help&#39; 中的 &#39;Note about fast-forwards&#39; 小节。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解决方案：需要先获取远端更新并与本地合并,再git push</p><pre class="line-numbers language-none"><code class="language-none">git remote add origin https:&#x2F;&#x2F;github.com&#x2F;miaoihan&#x2F;weibo.git  $git fetch origin    &#x2F;&#x2F;获取远程更新$git merge origin&#x2F;master &#x2F;&#x2F;把更新的内容合并到本地分支<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="将本地已有的项目完整的提交到github上"><a href="#将本地已有的项目完整的提交到github上" class="headerlink" title="将本地已有的项目完整的提交到github上"></a>将本地已有的项目完整的提交到github上</h3><p><code>~/NutstoreFiles/project/grafana-tutorial</code>项目为示例进行操作</p><p>在GitHub新建一个仓库</p><pre class="line-numbers language-none"><code class="language-none">$ cd ~&#x2F;NutstoreFiles&#x2F;project&#x2F;grafana-tutorial# 本地仓库初始化$ git init# 把全部文件添加到暂存区git add .# 把暂存区的文件提交到本地仓库git commit -m &quot;初始化提交&quot;# 连接远程仓库并推送# git remote add origin 远程仓库地址# origin是给远程仓库取的一个别名，远程仓库地址是GitHub仓库地址。该命令作用是让本地仓库和远程仓库相连接。git remote add origin git@github.com:amuqiao&#x2F;grafana-tutorial.git# 把本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程。由于远程库是空的，# 我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，# 还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令（直接用git pull或者git push）。# 向master分支进行推送git push -u origin master# 强行推送，本地仓库代码强行覆盖远程仓库：$ git push -f origin master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>参考 <a href="https://blog.csdn.net/qq_42780289/article/details/102512463">Git：将本地项目推送到GitHub</a></li><li></li></ul><h3 id="git-branch-结果不在当前页显示"><a href="#git-branch-结果不在当前页显示" class="headerlink" title="git branch 结果不在当前页显示"></a>git branch 结果不在当前页显示</h3><p>某些git命令的输出内容不是直接显示在命令下面，而是会额外打开一个窗口来显示，按q才能退出该窗口<br>终端执行</p><pre class="line-numbers language-none"><code class="language-none">git config --global core.pager &#39;&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tmux使用教程</title>
      <link href="2021/03/22/tmux-shi-yong-jiao-cheng/"/>
      <url>2021/03/22/tmux-shi-yong-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Tmux 是一个终端复用器（terminal multiplexer），非常有用，属于常用的开发工具。</p></blockquote><span id="more"></span><h3 id="tmux的基本操作"><a href="#tmux的基本操作" class="headerlink" title="tmux的基本操作"></a>tmux的基本操作</h3><p><code>Prefix-Command</code>前置操作：所有下面介绍的快捷键，都必须以前置操作开始。tmux默认的前置操作是<code>CTRL+b</code>。例如，我们想要新建一个窗体，就需要先在键盘上摁下<code>CTRL+b</code>，松开后再摁下<code>n</code>键。</p><p>下面所有的<code>prefix</code>均代表<code>CTRL+b</code></p><h3 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h3><pre class="line-numbers language-none"><code class="language-none">d  退出 tmux（tmux 仍在后台运行）t  窗口中央显示一个数字时钟?  列出所有快捷键:  命令提示符<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Session相关操作"><a href="#Session相关操作" class="headerlink" title="Session相关操作"></a>Session相关操作</h3><table><thead><tr><th>操作</th><th>快捷键</th></tr></thead><tbody><tr><td>新建一个无名称的会话</td><td>tmux</td></tr><tr><td>新建一个名称为demo的会话</td><td>tmux new -s demo</td></tr><tr><td>默认进入第一个会话</td><td>tmux a</td></tr><tr><td>进入到名称为demo的会话</td><td>tmux a -t demo</td></tr><tr><td>session 重命名</td><td>tmux rename -t old_name new_name</td></tr><tr><td>查看所有 session</td><td>tmux ls</td></tr><tr><td>查看/切换session</td><td>prefix s</td></tr><tr><td>离开Session</td><td>prefix d</td></tr><tr><td>重命名当前Session</td><td>prefix $</td></tr></tbody></table><h3 id="Window相关操作"><a href="#Window相关操作" class="headerlink" title="Window相关操作"></a>Window相关操作</h3><table><thead><tr><th>操作</th><th>快捷键</th></tr></thead><tbody><tr><td>新建窗口</td><td>prefix c</td></tr><tr><td>新建命名窗口</td><td>prefix -s new_name</td></tr><tr><td>切换到上一个活动的窗口</td><td>prefix space</td></tr><tr><td>关闭当前窗口</td><td>prefix &amp;</td></tr><tr><td>使用窗口号切换</td><td>prefix 窗口号</td></tr><tr><td>列出所有窗口</td><td>prefix w</td></tr><tr><td>前一个窗口</td><td>p</td></tr><tr><td>后一个窗口</td><td>n</td></tr><tr><td>重命名当前窗口</td><td>,</td></tr><tr><td>查找窗口</td><td>f</td></tr></tbody></table><h4 id="调整窗口排序"><a href="#调整窗口排序" class="headerlink" title="调整窗口排序"></a>调整窗口排序</h4><table><thead><tr><th>操作</th><th>快捷键</th></tr></thead><tbody><tr><td>交换 3 号和 1 号窗口</td><td>swap-window -s 3 -t 1</td></tr><tr><td>交换当前和 1 号窗口</td><td>swap-window -t 1</td></tr><tr><td>移动当前窗口到 1 号</td><td>move-window -t 1</td></tr></tbody></table><h3 id="Pane相关操作"><a href="#Pane相关操作" class="headerlink" title="Pane相关操作"></a>Pane相关操作</h3><table><thead><tr><th>操作</th><th>快捷键</th></tr></thead><tbody><tr><td>切换到下一个窗格</td><td>prefix o</td></tr><tr><td>查看所有窗格的编号</td><td>prefix q</td></tr><tr><td>垂直拆分出一个新窗格</td><td>prefix “</td></tr><tr><td>水平拆分出一个新窗格</td><td>prefix %</td></tr><tr><td>切换窗格最大化/最小化</td><td>z</td></tr><tr><td>与上一个窗格交换位置</td><td>{</td></tr><tr><td>与下一个窗格交换位置</td><td>}</td></tr><tr><td>关闭窗格</td><td>x</td></tr><tr><td>垂直分割</td><td>%</td></tr><tr><td>水平分割</td><td>“</td></tr></tbody></table><h4 id="调整窗格尺寸"><a href="#调整窗格尺寸" class="headerlink" title="调整窗格尺寸"></a>调整窗格尺寸</h4><p>如果你不喜欢默认布局，可以重调窗格的尺寸。虽然这很容易实现，但一般不需要这么干。这几个命令用来调整窗格：</p><h3 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h3><pre class="line-numbers language-none"><code class="language-none"># 列出所有快捷键，及其对应的 Tmux 命令$ tmux list-keys# 列出所有 Tmux 命令及其参数$ tmux list-commands# 列出当前所有 Tmux 会话的信息$ tmux info# 重新加载当前的 Tmux 配置$ tmux source-file ~&#x2F;.tmux.conf# 关闭服务器，所有的会话都将关闭, 重启tmux生效配置tmux kill-server # 在session中，先按C+b，然后输入：，进入命令行模式，在命令行模式下输入source-file ~&#x2F;.tmux.conf# 关闭demo会话tmux kill-session -t demo <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Tmux-安装"><a href="#Tmux-安装" class="headerlink" title="Tmux 安装"></a>Tmux 安装</h3><pre class="line-numbers language-none"><code class="language-none">$ brew install tmux<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="修改tmux配置"><a href="#修改tmux配置" class="headerlink" title="修改tmux配置"></a>修改tmux配置</h3><h4 id="鼠标滚动查看上下文"><a href="#鼠标滚动查看上下文" class="headerlink" title="鼠标滚动查看上下文"></a><a href="https://github.com/NHDaly/tmux-better-mouse-mode">鼠标滚动查看上下文</a></h4><pre class="line-numbers language-none"><code class="language-none">vi ~&#x2F;.tmux.conf# 开启鼠标模式set -g mouse on<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="修改Prefix-Command"><a href="#修改Prefix-Command" class="headerlink" title="修改Prefix-Command"></a>修改<code>Prefix-Command</code></h4><pre class="line-numbers language-none"><code class="language-none"># 修改前置快捷键set -g prefix C-zunbind C-b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="窗口自定义命名"><a href="#窗口自定义命名" class="headerlink" title="窗口自定义命名"></a>窗口自定义命名</h4><pre class="line-numbers language-none"><code class="language-none"># 如果喜欢给窗口自定义命名，那么需要关闭窗口的自动命名set-option -g allow-rename off<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="鼠标选中复制"><a href="#鼠标选中复制" class="headerlink" title="鼠标选中复制"></a>鼠标选中复制</h4><pre class="line-numbers language-none"><code class="language-none"># 鼠标选中复制bind -n WheelUpPane if-shell -F -t &#x3D; &quot;#&#123;mouse_any_flag&#125;&quot; &quot;send-keys -M&quot; &quot;if -Ft&#x3D; &#39;#&#123;pane_in_mode&#125;&#39; &#39;send-keys -M&#39; &#39;select-pane -t&#x3D;; copy-mode -e; send-keys -M&#39;&quot;bind -n WheelDownPane select-pane -t&#x3D; \; send-keys -Mbind -n C-WheelUpPane select-pane -t&#x3D; \; copy-mode -e \; send-keys -Mbind -T copy-mode-vi    C-WheelUpPane   send-keys -X halfpage-upbind -T copy-mode-vi    C-WheelDownPane send-keys -X halfpage-downbind -T copy-mode-emacs C-WheelUpPane   send-keys -X halfpage-upbind -T copy-mode-emacs C-WheelDownPane send-keys -X halfpage-down# To copy, left click and drag to highlight text in yellow,# once you release left click yellow text will disappear and will automatically be available in clibboard# # Use vim keybindings in copy modesetw -g mode-keys vi# Update default binding of &#96;Enter&#96; to also use copy-pipeunbind -T copy-mode-vi Enterbind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel &quot;pbcopy&quot;bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel &quot;pbcopy&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="TMUX-插件"><a href="#TMUX-插件" class="headerlink" title="TMUX 插件"></a>TMUX 插件</h3><h4 id="TMUX-插件管理器"><a href="#TMUX-插件管理器" class="headerlink" title="TMUX 插件管理器"></a><a href="https://github.com/tmux-plugins/tpm">TMUX 插件管理器</a></h4><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><pre class="line-numbers language-none"><code class="language-none">git clone https:&#x2F;&#x2F;github.com&#x2F;tmux-plugins&#x2F;tpm ~&#x2F;.tmux&#x2F;plugins&#x2F;tpm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加以下信息到配置文件中<code>~/.tmux.conf</code>($XDG_CONFIG_HOME/tmux/tmux.conf works too):</p><pre class="line-numbers language-none"><code class="language-none"># 插件列表set -g @plugin &#39;tmux-plugins&#x2F;tpm&#39;set -g @plugin &#39;tmux-plugins&#x2F;tmux-sensible&#39;# 其他示例:# set -g @plugin &#39;github_username&#x2F;plugin_name&#39;# set -g @plugin &#39;git@github.com:user&#x2F;plugin&#39;# set -g @plugin &#39;git@bitbucket.com:user&#x2F;plugin&#39;# 初始化tmux插件管理器 (将这行添加到配置文件最底部)run &#39;~&#x2F;.tmux&#x2F;plugins&#x2F;tpm&#x2F;tpm&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重启<code>TMUX</code>环境,使<code>TPM</code>生效(添加其他插件也需要执行该命令):</p><pre class="line-numbers language-none"><code class="language-none"># 如果tmux正在运行，在终端执行该命令$ tmux source ~&#x2F;.tmux.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h5><ul><li>添加插件到配置文件<code>~/.tmux.conf</code>中，例如:set -g @plugin ‘…’</li><li>按 prefix + I (如Install中的大写字母I) 安装插件.</li></ul><p>稍等片刻，插件会被下载到<code>~/.tmux/plugins/</code>文件夹中</p><h5 id="卸载插件"><a href="#卸载插件" class="headerlink" title="卸载插件"></a>卸载插件</h5><ul><li>在插件列表中移除该插件.</li><li>输入<code>prefix + alt + u</code> (小写u进行卸载) 来移除插件.</li></ul><h5 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h5><p><code>prefix + I</code></p><ul><li>从<code>github</code>或者其他仓库中安装在插件列表中的插件</li><li>刷新<code>TMUX</code>环境</li></ul><p><code>prefix + U</code></p><ul><li>更新插件<br>prefix + alt + u</li><li>移除/下载不在插件列表中的插件</li></ul><h5 id="更新配置信息"><a href="#更新配置信息" class="headerlink" title="更新配置信息"></a>更新配置信息</h5><p>若对<code>~/.tmux.conf</code>做出修改，执行<code>tmux source-file ~/.tmux.conf</code>命令使配置生效</p><h4 id="TMUX插件中心"><a href="#TMUX插件中心" class="headerlink" title="TMUX插件中心"></a><a href="https://github.com/tmux-plugins/list">TMUX插件中心</a></h4><p>tmux支持下列插件</p><ul><li>extrakto - Allows you to select text from your window by fuzzy matching it through a set of filters with fzf. Look ma, no mouse!</li><li>tmux-battery - Plug and play battery percentage and icon indicator.</li><li>tmux-colours-superhero - A superhero themed tmux colour theme.</li><li>tmux-continuum - Continuous saving of tmux environment. Automatic restore when tmux is started. Automatic tmux start when computer is turned on.</li><li>tmux-copycat - Enhances tmux search.</li><li>tmux-copytk - Multi utility rapid copy toolkit.</li><li>tmux-cpu - Plug and play cpu percentage and icon indicator.</li><li>tmux-fpp - Quickly open any path on your terminal window in your $EDITOR of choice!</li><li>tmux-jump - Vimium/Easymotion like navigation for tmux.</li><li>tmux-keyboard-layout - Show current keyboard layout in your status bar</li><li>tmux-logging - Easy logging and screen capturing.</li><li>tmux-maildir-counter - Plugin that counts files on a specific mail directory.</li><li>tmux-mem-cpu-load - CPU, RAM, and load monitor for use with tmux.</li><li>tmux-net-speed - Tmux plugin to monitor upload and download speed of one or all interfaces.</li><li>tmux-online-status - Tmux plugin that displays online status of your computer.</li><li>tmux-open - Tmux key bindings for quick opening of a highlighted file or url.</li><li>tmux-pain-control - Standard pane key-bindings for tmux.</li><li>tmux-peacock - Per session color and style based on session name</li><li>tmux-piavpn - Keep track of your Private Internet Access VPN status.</li><li>tmux-pomodoro - Use Pomodoro technique with timer showing in tmux status bar.</li><li><a href="https://github.com/tmux-plugins/tmux-prefix-highlight">tmux-prefix-highlight</a> 当你按下tmux前缀键时突出显示的插件.</li><li><a href="https://github.com/tmux-plugins/tmux-resurrect">tmux-resurrect</a> - 在系统重启时持续tmux环境.</li><li>tmux-sensible - Basic tmux settings everyone can agree on.</li><li>tmux-sessionist - Lightweight utils for manipulating sessions.</li><li>tmux-sidebar - A sidebar with the directory tree for the current path. Tries to make tmux more IDE like.</li><li>tmux-ticker - Keep a track of popular market indexes and stock price.</li><li>tmux-update-display - When attaching to tmux session, update $DISPLAY for each tmux pane in that session.</li><li>tmux-urlview - Quickly open any url on your terminal window!</li><li>tmux-weather - Display weather information in your terminal.</li><li>tmux-yank - 用于复制到系统剪贴板。适用于MacOS, Linux和Cygwin.</li><li>tpm - Tmux plugin manager.</li></ul><h4 id="窗口持久化插件-tmux-resurrect"><a href="#窗口持久化插件-tmux-resurrect" class="headerlink" title="窗口持久化插件 tmux-resurrect"></a>窗口持久化插件 <a href="https://github.com/tmux-plugins/tmux-resurrect"><code>tmux-resurrect</code></a></h4><p>Tmux 虽好，但是一旦重启，之前的窗口环境都会消失得无影无踪，幸好有了这个插件<br>有了它，你可以通过简单的两个快捷键随时备份或恢复窗口环境。</p><p>使用 <a href="https://github.com/tmux-plugins/tpm">Tmux插件管理器</a>(推荐)，安装插件后，在配置文件中插件列表的位置加入这一行</p><pre class="line-numbers language-none"><code class="language-none">set -g @plugin &#39;tmux-plugins&#x2F;tmux-resurrect&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>点击<code>prefix + I</code>来获取插件使之生效。</p><p>安装成功后使用 <code>prefix + Ctrl-s</code> 保存，使用 <code>prefix + Ctrl-r</code> 恢复。</p><p>值得注意的是，恢复后，原窗口中的进程会被杀掉。如果你是重启后恢复，那自然没什么问题，但是平时试验的时候可要留心有没有重要的任务正在运行中。</p><p><a href="https://github.com/tmux-plugins/tmux-resurrect/blob/e4825055c92e54b0c6ec572afc9b6c4723aba6c8/docs/save_dir.md">Resurrect save dir</a></p><p>Tmux 环境默认保存在<code> ~/.tmux/resurrect dir</code>中，如果需要更改，使用以下命令</p><pre class="line-numbers language-none"><code class="language-none"># set -g @resurrect-dir &#39;&#x2F;some&#x2F;path&#39;set -g @resurrect-dir &#39;~&#x2F;.tmux&#x2F;resurrect&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在这个选项中不允许使用环境变量或shell插值，因为字符串是按字面意思使用的。所以下面这些不会达到预期的效果:</p><pre class="line-numbers language-none"><code class="language-none">set -g @resurrect-dir &#39;&#x2F;path&#x2F;$MY_VAR&#x2F;$(some_executable)&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>仅支持这些变量设置: <code>$HOME</code>, <code>$HOSTNAME</code>, 和 <code>~</code>.</p><h5 id="mac系统重启后，tmux-插件失效"><a href="#mac系统重启后，tmux-插件失效" class="headerlink" title="mac系统重启后，tmux 插件失效"></a>mac系统重启后，tmux 插件失效</h5><p>mac系统重启后，tmux进程终止，tmux 插件失效，<code>tmux-prefix-highlight</code>无法高亮显示<code>prefix</code>键，使用<code>tmux</code>启动进程，<code>prefix + Ctrl-r</code>无法恢复<code>session</code></p><p>按以下方式可恢复session</p><ol><li>重启mac系统</li><li>启动tmux进程，<code>$ tmux</code></li><li>重载tmux配置文件，<code>$ prefix + I</code></li><li>恢复之前保存的session，<code>prefix + Ctrl-r</code></li></ol><h3 id="我的配置文件-tmux-conf"><a href="#我的配置文件-tmux-conf" class="headerlink" title="我的配置文件~/tmux.conf"></a>我的配置文件<code>~/tmux.conf</code></h3><pre class="line-numbers language-none"><code class="language-none"># -----------------------------------------------------------------------------# Tmux 基本配置 - 要求 Tmux &gt;&#x3D; 2.3# 如果不想使用插件，只需要将此节的内容写入 ~&#x2F;.tmux.conf 即可# -----------------------------------------------------------------------------# 开启鼠标模式set -g mouse on# 修改前置快捷键set -g prefix C-zunbind C-b# 鼠标选中复制bind -n WheelUpPane if-shell -F -t &#x3D; &quot;#&#123;mouse_any_flag&#125;&quot; &quot;send-keys -M&quot; &quot;if -Ft&#x3D; &#39;#&#123;pane_in_mode&#125;&#39; &#39;send-keys -M&#39; &#39;select-pane -t&#x3D;; copy-mode -e; send-keys -M&#39;&quot;bind -n WheelDownPane select-pane -t&#x3D; \; send-keys -Mbind -n C-WheelUpPane select-pane -t&#x3D; \; copy-mode -e \; send-keys -Mbind -T copy-mode-vi    C-WheelUpPane   send-keys -X halfpage-upbind -T copy-mode-vi    C-WheelDownPane send-keys -X halfpage-downbind -T copy-mode-emacs C-WheelUpPane   send-keys -X halfpage-upbind -T copy-mode-emacs C-WheelDownPane send-keys -X halfpage-down# To copy, left click and drag to highlight text in yellow,# once you release left click yellow text will disappear and will automatically be available in clibboard# # Use vim keybindings in copy modesetw -g mode-keys vi# Update default binding of &#96;Enter&#96; to also use copy-pipeunbind -T copy-mode-vi Enterbind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel &quot;pbcopy&quot;bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel &quot;pbcopy&quot;# -----------------------------------------------------------------------------# 使用插件 - via tpm# -----------------------------------------------------------------------------# 插件列表set -g @plugin &#39;tmux-plugins&#x2F;tpm&#39;set -g @plugin &#39;tmux-plugins&#x2F;tmux-sensible&#39;set -g @plugin &#39;tmux-plugins&#x2F;tmux-resurrect&#39;set -g @plugin &#39;tmux-plugins&#x2F;tmux-prefix-highlight&#39;# 其他示例:# set -g @plugin &#39;github_username&#x2F;plugin_name&#39;# set -g @plugin &#39;git@github.com:user&#x2F;plugin&#39;# set -g @plugin &#39;git@bitbucket.com:user&#x2F;plugin&#39;# tmux-prefix-highlight 插件配置set -g status-right &#39;#&#123;prefix_highlight&#125; #H | %a %Y-%m-%d %H:%M&#39;set -g @prefix_highlight_show_copy_mode &#39;on&#39;set -g @prefix_highlight_copy_mode_attr &#39;fg&#x3D;white,bg&#x3D;blue&#39;# resurrect 插件配置 保存现场到以下目录set -g @resurrect-dir &#39;~&#x2F;.tmux&#x2F;resurrect&#39;# 初始化tmux插件管理器 (将这行添加到配置文件最底部)run &#39;~&#x2F;.tmux&#x2F;plugins&#x2F;tpm&#x2F;tpm&#39;# -----------------------------------------------------------------------------# 结束# -----------------------------------------------------------------------------<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="http://louiszhai.github.io/2017/09/30/tmux/">Tmux使用手册</a></li><li><a href="https://www.cnblogs.com/kaiye/p/6275207.html">十分钟学会 tmux</a></li><li><a href="https://gist.github.com/ryerh/14b7c24dfd623ef8edc7">Tmux 快捷键 &amp; 速查表</a></li><li><a href="http://blog.codepiano.com/2018/06/11/tmux-tpm">tmux 插件管理器和插件</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tmux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Grafana入门教程</title>
      <link href="2021/03/22/grafana-ru-men-jiao-cheng/"/>
      <url>2021/03/22/grafana-ru-men-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://github.com/grafana/grafana">Grafana</a>是一个开源的度量分析与可视化套件。<span id="more"></span> 经常被用作基础设施的时间序列数据和应用程序分析的可视化，它在其他领域也被广泛的使用包括工业传感器、家庭自动化、天气和过程控制等。</p></blockquote><h3 id="Grafana-是什么"><a href="#Grafana-是什么" class="headerlink" title="Grafana 是什么"></a>Grafana 是什么</h3><p>Grafana 是一个监控仪表系统，它是由 Grafana Labs 公司开源的的一个系统监测 (System Monitoring) 工具。它可以大大帮助你简化监控的复杂度，你只需要提供你需要监控的数据，它就可以帮你生成各种可视化仪表。同时它还有报警功能，可以在系统出现问题时通知你。</p><p>Grafana 不对数据源作假设，它支持以下各种数据，也就是说如果你的数据源是以下任意一种，它都可以帮助生成仪表。同时在市面上，如果 Grafana 称第二，那么应该没有敢称第一的仪表可视化工具了。因此，如果你搞定了 Grafana，它几乎是一个会陪伴你到各个公司的一件称心应手的兵器。</p><h4 id="Grafana-支持的数据源"><a href="#Grafana-支持的数据源" class="headerlink" title="Grafana 支持的数据源"></a>Grafana 支持的数据源</h4><ul><li>Prometheus 时序数据库 本文中的例子，你没听过也没关系不影响阅读，把它想象成带时间戳的 MySQL 就好</li><li>Graphite</li><li>OpenTSDB</li><li>InfluxDB</li><li>MySQL/PostgreSQL</li><li>Microsoft SQL Server</li></ul><h3 id="安装和配置-Grafana"><a href="#安装和配置-Grafana" class="headerlink" title="安装和配置 Grafana"></a>安装和配置 Grafana</h3><blockquote><p>为了简化各种系统不一致的乱七八糟问题，我们用 Docker 来安装 Grafana。</p></blockquote><p>请 clone <a href="https://github.com/amuqiao/grafana-tutorial/tree/main">本教程代码</a>，然后确认本地已经安装 <code>docker-compose</code> 后，在本目录运行</p><pre class="line-numbers language-none"><code class="language-none">docker-compose up<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这条命令会启动三个 docker 容器，<code>prometheus</code>, <code>service</code> 和 <code>grafana</code></p><ul><li>prometheus 是普罗米修斯时序数据库</li><li>service 是普罗米修斯自带的数据生成器（监控本机 CPU 内存等信息）</li><li>grafana 就是 Grafana 服务本身</li></ul><p>在你的浏览器中访问 <a href="localhost:3000">localhost:3000</a> 即可看到运行的 Grafana，再根据教程中的步骤设置好源即可</p><h3 id="配置仪表盘"><a href="#配置仪表盘" class="headerlink" title="配置仪表盘"></a>配置仪表盘</h3><p>在使用<code>docker-compose up</code>启动服务后，到你的浏览器中，复制 <a href="http://localhost:3000/">http://localhost:3000</a> 应该就可以看到 Grafana 跑起来的初始登录界面。初始的用户名是 admin，密码也是 admin。输入之后，会要求你改密码,这里我改为123456<br><img src="https://aamuqiao.oss-cn-beijing.aliyuncs.com/uPic/22B15n.png" alt="22B15n"></p><p>然后就可以进入 Grafana 的主界面了：<br><img src="https://aamuqiao.oss-cn-beijing.aliyuncs.com/uPic/eNTG0T.png" alt="eNTG0T"></p><p>到这里，你的 Grafana 就已经搭起来了。注意到 Docker 的配置文件中我们创建了三个服务，这三个服务之间分别有什么关系呢？</p><p>或者说，Grafana 和时序数据库，数据源之间有什么关系呢？请看下文 Grafana 工作原理</p><h3 id="Grfana-工作原理"><a href="#Grfana-工作原理" class="headerlink" title="Grfana 工作原理"></a>Grfana 工作原理</h3><p>上面说到，Grafana 是一个仪表盘，而仪表盘必然是用来显示数据的。</p><p>Grafana 本身并不负责数据层，它只提供了通用的接口，让底层的数据库可以把数据给它。而我们起的另一个服务，叫 Prometheus （中文名普罗米修斯数据库）则是负责存储和查询数据的。</p><p>也就是说，Grafana 每次要展现一个仪表盘的时候，会向 Prometheus 发送一个查询请求。</p><p>那么配置里的另一个服务 Prometheus-exporter 又是什么呢？</p><p>这个就是你真正监测的数据来源了，Prometheus-exporter 这个服务，会查询你的本地电脑的信息，比如内存还有多少、CPU 负载之类，然后将数据导出至普罗米修斯数据库。</p><p>在真实世界中，你的目的是监控你自己的服务，比如你的 Web 服务器，你的数据库之类。</p><p>那么你就需要在你自己的服务器中把数据发送给普罗米修斯数据库。当然，你完全可以把数据发送给 MySQL (Grafana 也支持)，但普罗米修斯几乎是标配的时序数据库，强烈建议你用。</p><p>用<a href="https://shahbhargav.medium.com/monitoring-docker-containers-using-cadvisor-and-prometheus-5350ae038f45">一张图</a>来说明它们之间的关系:<br><img src="https://aamuqiao.oss-cn-beijing.aliyuncs.com/uPic/hq0RtW.jpg" alt="hq0RtW"></p><p>这里，最左边的 Docker 服务会将服务的数据发送给中间的普罗米修斯（对应上文的 Prometheus-exporter），而最右边的 Grafana 会查询中间的普罗米修斯，来展示仪表盘。</p><h3 id="搭建你的第一个仪表盘"><a href="#搭建你的第一个仪表盘" class="headerlink" title="搭建你的第一个仪表盘"></a>搭建你的第一个仪表盘</h3><h4 id="设置数据源"><a href="#设置数据源" class="headerlink" title="设置数据源"></a>设置数据源</h4><p>进入 Grafana 后，在左侧你会发现有一个 Data Source 即数据源选项<br><img src="https://aamuqiao.oss-cn-beijing.aliyuncs.com/uPic/c6T5xz.png" alt="c6T5xz"><br>点击后进入，点 Add Data Source 即添加数据源，选择 Prometheus<br><img src="https://aamuqiao.oss-cn-beijing.aliyuncs.com/uPic/nTuJVL.png" alt="nTuJVL"></p><p>之后设置数据源 URL。请注意，Promethues 的工作原理是通过轮询一个 HTTP 请求来获取数据的，而 Grafana 在获取数据源的时候也是通过一个 HTTP 请求，因此这个地方你需要告诉 Grafana 你的 Prometheus 的数据端点是什么。</p><p>这里我们填入 <a href="http://prometheus:9090/">http://prometheus:9090</a> 就可以了。<br><img src="https://aamuqiao.oss-cn-beijing.aliyuncs.com/uPic/ohtJiw.png" alt="ohtJiw"><br><img src="https://aamuqiao.oss-cn-beijing.aliyuncs.com/uPic/xXyiQB.png" alt="xXyiQB"><br>点确认时一定要确认出现 Data source is working 这个检测，这时表明你的 Grafana 已经跟普罗米修斯说上话了</p><h4 id="导入-Dashboard"><a href="#导入-Dashboard" class="headerlink" title="导入 Dashboard"></a>导入 Dashboard</h4><p>在 Grafana 里，仪表盘的配置可以通过图形化界面进行，但配置好的仪表盘是以 JSON 存储的。这也就是说，如果你把你的 JSON 数据分享出去，别人导入就可以直接导入同样的仪表盘（前提是你们的监测数据一样）。</p><p>对于我们的例子来说，回忆一下，因为我们用了 prometheus-exporter 也就是本机的系统信息监控，那么我们可以先找一个同样用了这个数据源的仪表盘。在 Grafana 网站上，你其实可以找到很多别人已经做好的仪表，可以用来监测非常多标准化的服务。</p><p>Grafana 的仪表盘市场：<a href="https://grafana.com/grafana/dashboards">https://grafana.com/grafana/dashboards</a></p><p>比如说针对以下一些服务的标准仪表盘就可以在这里找到</p><ul><li>JVM</li><li>Spring Boot</li><li>MySQL 监控</li><li>Laravel 监控<br>那么，这里我们就用一个标准的仪表盘：<a href="https://grafana.com/grafana/dashboards/1860">https://grafana.com/grafana/dashboards/1860</a></li></ul><p>在左侧的加号里，点 Import 即导入，在出现的界面中填入 1860 即我们要导入的仪表盘编号即可。<br><img src="https://aamuqiao.oss-cn-beijing.aliyuncs.com/uPic/j198Ty.png" alt="j198Ty"><br>然后填入你需要的信息，比如仪表盘名字等<br><img src="https://aamuqiao.oss-cn-beijing.aliyuncs.com/uPic/J6HLTl.png" alt="J6HLTl"><br>确认之后 Grafana 就会根据你的本机信息，生成类似 CPU 负载，内存和 I/O 之类的信息。我的磁盘状况如图：<br><img src="https://aamuqiao.oss-cn-beijing.aliyuncs.com/uPic/HZrRYJ.png" alt="HZrRYJ"><br>要注意的是，这里的信息真正监控的是你的 Docker 中的系统信息。如果你只给你的 Docker 分配 1 个核和 2G 内存，那么这里应该看到的就是 1 个核和 2G 内存</p><h4 id="生成和创建新的仪表盘"><a href="#生成和创建新的仪表盘" class="headerlink" title="生成和创建新的仪表盘"></a>生成和创建新的仪表盘</h4><p>最后，在上面导入信息的基础上，你就可以开始创建和你的服务、业务相关的仪表盘了。</p><p>但在这步之前，你需要先在你的服务中开始记录一些数据。</p><p>这一步涉及</p><p><strong>如何在各种语言中记录你关注的数据？</strong></p><p>拿卡拉搜索举例子，我们关注用卡拉搜索的 APP 的搜索响应速度，所以自然我们需要在所有搜索请求处记录延迟。</p><p>对于你的服务，你需要根据自己的业务确认哪些数据是重要的，关于如何记录数据，如何思考运维等，我会在之后的博客中继续深入讨论。如果你想更深入地了解这个领域，推荐阅读 Google 运维手册这本书，英文名叫《Google SRE Book》，免费的书。</p><p><strong>包括如何用 Prometheus 查询数据</strong></p><p>普罗米修斯本身也是个非常大的话题，我们会在之后的博客中继续讨论。普罗米修斯包括所有其它时序数据库通常都会定义一个查询语言，比如说 PromQL，如果需要熟练地构建仪表盘的话，需要对这个查询语言有一定了解。</p><p><strong>如何手动生成一个仪表盘</strong></p><p>假设你已经按上面的步骤生成了一个基本的仪表盘，那么现在可以开始手动添加仪表盘了。同样是点左侧的加号，点 Dashboard 就可以进入添加仪表盘的界面。</p><p>这里我们选择一个数据叫 scrape_duration_seconds，先不用管它的含义是什么，就当它是双 11 的销售额好了：<br><img src="https://aamuqiao.oss-cn-beijing.aliyuncs.com/uPic/OHf5oL.png" alt="OHf5oL"><br>添加好后点右上角的 Apply 或 Save 你的仪表盘就被保存了。这时候，用一个大屏幕展示一下，庆祝一下双十一又过了千亿吧 :D</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这篇文章里我们从头到尾介绍了如何用 Grafana 生成仪表盘，如何配置和连接数据源，以及如何导入和创建一个仪表盘。</p><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://support.websoft9.com/docs/grafana/zh/">Grafana 管理员手册</a></li><li><a href="https://kalasearch.cn/blog/grafana-with-prometheus-tutorial/">Grafana 教程 - 构建你的第一个仪表盘</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> grafana </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>精品mac应用分享</title>
      <link href="2021/03/20/jing-pin-mac-ying-yong-fen-xiang/"/>
      <url>2021/03/20/jing-pin-mac-ying-yong-fen-xiang/</url>
      
        <content type="html"><![CDATA[<blockquote><p>推荐优质mac应用，开发效率利器，亲自验证</p></blockquote><span id="more"></span><h4 id="文件处理"><a href="#文件处理" class="headerlink" title="文件处理"></a>文件处理</h4><ul><li><a href="https://itunes.apple.com/us/app/the-unarchiver/id425424353?mt=12">The Unarchiver</a> 解压</li></ul><h4 id="文件传输"><a href="#文件传输" class="headerlink" title="文件传输"></a>文件传输</h4><ul><li><a href="https://nitroshare.net/">nitroshare</a> 跨平台网络文件传输应用</li></ul><h4 id="网络工具"><a href="#网络工具" class="headerlink" title="网络工具"></a>网络工具</h4><ul><li><a href="https://github.com/yangshun1029/aria2gui">Aria2GUI</a> 一款百度云文件不限速下载工具</li><li><a href="https://motrix.app/">Motrix</a> “十分清爽的下载软件，无会员制、不限速。还可以按照步骤在应用中增加百度网盘下载助手，但没有会员还是会被限速哦。” </li></ul><h4 id="数据库工具"><a href="#数据库工具" class="headerlink" title="数据库工具"></a>数据库工具</h4><ul><li><a href="https://www.jetbrains.com/datagrip/">DataGrip</a> JetBrains公司旗下一款数据库管理工具</li><li><a href="http://xclient.info/s/navicat-for-mysql.html?t=6b420ac7268d7637225dd7d2519333ebc31537ba">Navicat for MySQL</a> 图形化 MySQL 数据库管理工具</li><li><a href="https://www.charlesproxy.com/">Charles</a> 一个HTTP代理/ HTTP监视器/反向代理,它使开发人员能够查看他们的机器和Internet之间的所有HTTP和SSL / HTTPS通信。这包括请求、响应和HTTP头(其中包含cookie和缓存信息)。</li></ul><h4 id="FTP"><a href="#FTP" class="headerlink" title="FTP"></a>FTP</h4><ul><li><a href="http://xclient.info/s/transmit.html?t=6b420ac7268d7637225dd7d2519333ebc31537ba">Transmit</a> mac上最好用的功能齐全的FTP客户端<h4 id="Markdown编辑器"><a href="#Markdown编辑器" class="headerlink" title="Markdown编辑器"></a>Markdown编辑器</h4></li><li><a href="https://ivarptr.github.io/yu-writer.site/">Yu Writer</a>一款能够找到写作乐趣的Markdown文本编辑器</li><li><a href="https://toolinbox.net/iPic/">Typora</a> 一款极致简洁的 markdown 编辑器</li></ul><h4 id="语音识别"><a href="#语音识别" class="headerlink" title="语音识别"></a>语音识别</h4><ul><li><a href="https://apps.apple.com/cn/app/%E8%AE%AF%E9%A3%9E%E8%AF%AD%E9%9F%B3%E8%BE%93%E5%85%A5-%E6%99%BA%E8%83%BD%E8%AF%86%E5%88%AB-%E8%BD%BB%E6%9D%BE%E5%86%99%E4%BD%9C/id1243368435?mt=12">讯飞语音输入</a> 语义识别度较高</li></ul><h4 id="markdown-图床工具"><a href="#markdown-图床工具" class="headerlink" title="markdown 图床工具"></a>markdown 图床工具</h4><ul><li> 【<a href="https://github.com/gee1k/uPic/releases">uPic</a>】<a href="https://sspai.com/post/55933">支持自定义，一款免费而强大的Mac图床客户端</a></li></ul><h4 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h4><ul><li><a href="https://boostnote.io/#download">Boostnote</a> 程序员的开源笔记,除了日常笔记记录，最大的用处就是帮你记录无数的代码资源片段，支持markdown</li><li><a href="https://note.youdao.com/?keyfrom=ydoc">有道云笔记</a> 免费全平台同步，支持markdown</li></ul><h4 id="效率"><a href="#效率" class="headerlink" title="效率"></a>效率</h4><ul><li><a href="http://xclient.info/s/things.html?t=6b420ac7268d7637225dd7d2519333ebc31537ba">Things</a> 一款优秀的GTD任务管理工具<h4 id="音频和视频"><a href="#音频和视频" class="headerlink" title="音频和视频"></a>音频和视频</h4></li><li><a href="https://lhc70000.github.io/iina/">IINA</a>基于<a href="https://github.com/mpv-player/mpv">MPV</a>的，现代视频播放器，支持多点触摸控制，目前mac上最好用的免费开源播放器</li><li><a href="http://music.163.com/">网易云音乐</a><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4></li><li><a href="https://www.macupdate.com/app/mac/37872/scroll-reverser">Scroll Reverser</a> 一款mac上能够分开设定触摸板和鼠标的滚动方向的小工具</li><li><a href="http://mac.softpedia.com/get/Utilities/Shift-It.shtml">Shift It for Mac</a> 轻松用快捷键实现窗口管理</li><li><a href="https://www.macbartender.com/">Bartender</a>  一款实用的菜单栏管理工具,Bartender可以整理这些快捷菜单图标，提供折叠、排序等功能，并支持快捷键查找打开</li><li><a href="http://xclient.info/s/daisy-disk.html?t=cf45be83ba9e7cbc54b5a457f912356b56190ed7#versions">DaisyDisk</a> 一款快速扫描出磁盘上各文件夹的占用比例，并按文件大小排列的小工具，这对于定期清理旧文件和大文件非常有帮助</li><li><h4 id="程序员必备"><a href="#程序员必备" class="headerlink" title="程序员必备"></a>程序员必备</h4><a href="https://xclient.info/s/beyond-compare.html">Beyond Compare</a> 文件对比利器 <a href="https://blog.csdn.net/tanningzhong/article/details/81285278">破解教程</a></li></ul><h4 id="磁盘分析工具"><a href="#磁盘分析工具" class="headerlink" title="磁盘分析工具"></a>磁盘分析工具</h4><ul><li><a href="https://lemon.qq.com/">腾讯柠檬</a> 匠心打磨清理体验，一键释放磁盘空间</li></ul><h4 id="日历"><a href="#日历" class="headerlink" title="日历"></a>日历</h4><ul><li><a href="https://xclient.info/s/tinycal.html">TinyCal</a> 小而美的日历</li></ul><h4 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h4><ul><li><a href="http://www.sequelpro.com/">sequel pro</a> 一款管理Mysql的工具，界面简洁易用</li></ul><h4 id="vpn"><a href="#vpn" class="headerlink" title="vpn"></a>vpn</h4><ul><li><a href="https://duotai.love/">多态</a>  好用的vpn</li><li><a href="https://getlantern.org/zh_CN/index.html">蓝灯</a> 免费vpn</li><li><a href="https://www.yaoleguan.com/cn/?a=ez">佛跳墙</a> 免费vpn<h4 id="时间管理工具"><a href="#时间管理工具" class="headerlink" title="时间管理工具"></a>时间管理工具</h4></li><li><a href="https://mac.pomotodo.com/">番茄土豆</a> 番茄土豆帮助你保持专注，完成更多工作</li></ul><h4 id="项目流程管理工具"><a href="#项目流程管理工具" class="headerlink" title="项目流程管理工具"></a>项目流程管理工具</h4><p><a href="https://www.waitsun.com/omniplan-pro.html">OmniPlan Pro Mac</a> Mac上最优秀的项目流程管理工具</p><h4 id="GTD效率工具"><a href="#GTD效率工具" class="headerlink" title="GTD效率工具"></a>GTD效率工具</h4><p><a href="https://www.waitsun.com/omnifocus-3.html">OmniFocus Pro Mac</a> 优秀的GTD效率工具</p><h4 id="图表"><a href="#图表" class="headerlink" title="图表"></a>图表</h4><ul><li><a href="https://www.waitsun.com/omnigraffle-pro.html">OmniGraffle</a> 苹果上最著名的绘图软件，主要用于绘制流程图、图表、组织结构图、UI界面设计等等</li><li><a href="https://www.waitsun.com/xmind-zen.html">Xmind</a> 全新的思维导图软件,界面简洁，上手容易操作简单</li></ul><h4 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h4><ul><li><a href="https://www.waitsun.com/sublime-text.html">Sublime Text</a>  绝对强大的代码编辑神器</li></ul><h4 id="阅读"><a href="#阅读" class="headerlink" title="阅读"></a>阅读</h4><ul><li><a href="http://irreader.fatecore.com/">irreader</a> “订阅网页、RSS和Podcast，具备急速的阅读体验，高品质、免费、无广告、多平台的阅读器。”</li></ul><h4 id="壁纸"><a href="#壁纸" class="headerlink" title="壁纸"></a>壁纸</h4><ul><li><a href="https://www.waitsun.com/wallpaper-wizard.html">Wallpaper Wizard</a> 壁纸巫师， 超过10万张的超高质量壁纸</li></ul><h4 id="mac效率工具"><a href="#mac效率工具" class="headerlink" title="mac效率工具"></a>mac效率工具</h4><ul><li><a href="https://xclient.info/s/alfred.html">Alfred</a>  Mac 上最强大的工具台，一个图形化的终端，重新定义搜索功能</li><li><a href="https://www.baidu.com/link?url=me7E9iOUvk4y3WtK0YGmM2DP3doY9KMxroRr61QtyWCkhWDb5cB_IUTyaQAOW0MJ&wd=&eqid=de42068a0004bdbc000000065dc8d961">HyperDock</a>  Mac 窗口管理，支持窗口预览</li><li><a href="https://github.com/fikovnik/ShiftIt">shiftit</a> 快捷键窗口管理</li><li><a href="https://xclient.info/s/bettertouchtool.html">BetterTouchTool</a> 把鼠标触控板的潜力发挥到淋漓尽致</li><li><a href="https://www.waitsun.com/cd-to.html">cd to mac</a> 在Finder目录中快速打开终端</li><li><a href="https://www.waitsun.com/one-switch.html">One Switch</a> 一键切换系统各项功能</li><li><a href="https://www.waitsun.com/slidepad.html">Slidepad</a> iPad式APP切换工具，在系统侧边上设置一个窗口提供我们使用</li><li><a href="https://apps.apple.com/cn/app/manico/id724472954?mt=12">Manico</a> 一个强大的 App 启动器和切换器</li><li><a href="https://zh.snipaste.com/index.html">Snipaste</a> 一个简单但强大的截图工具</li></ul>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深刻理解python装饰器</title>
      <link href="2021/03/19/shen-ke-li-jie-python-zhuang-shi-qi/"/>
      <url>2021/03/19/shen-ke-li-jie-python-zhuang-shi-qi/</url>
      
        <content type="html"><![CDATA[<p>装饰器是程序开发中经常会⽤到的⼀个功能，⽤好了装饰器，开发效率如⻁添翼</p><span id="more"></span><h1 id="一、示例代码"><a href="#一、示例代码" class="headerlink" title="一、示例代码"></a>一、示例代码</h1><pre class="line-numbers language-none"><code class="language-none"># coding&#x3D;utf-8def w1(func):    print &#39;--执行w1()--&#39;    def inner():        print &#39;--执行inner()--&#39;        func()    print &#39;--w1()执行结束--&#39;    return inner@w1def f1():    print &#39;--f1()--&#39;f1()# 执行结果--执行w1()----w1()执行结束----执行inner()----f1()--<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="二、执行过程"><a href="#二、执行过程" class="headerlink" title="二、执行过程"></a>二、执行过程</h1><h2 id="1-语法糖-函数名"><a href="#1-语法糖-函数名" class="headerlink" title="1.语法糖:@+函数名"></a>1.语法糖:@+函数名</h2><p>python解释器就会从上到下解释代码，步骤如下：<br>① def w1(func): ==&gt;将w1函数加载到内存<br>② @w1<br>从表⾯上看解释器仅仅会解释这两句代码，因为函数在没有被调⽤之前其内部代码不会被执⾏。<br>但是<code>@w1</code>这⼀句代码⾥却有⼤⽂章，<code>@+函数名</code>是python的⼀种<code>语法糖</code>。</p><h2 id="2-w1内部执行过程"><a href="#2-w1内部执行过程" class="headerlink" title="2.@w1内部执行过程"></a>2.@w1内部执行过程</h2><p>在@w1内部会执行下一步操作:<br>执行w1函数，并将@w1下面的函数作为w1函数的参数</p><pre class="line-numbers language-none"><code class="language-none">@w1# 等价于 f1&#x3D;w1(f1)def f1():   xxx <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>此时f1已经不再指向原来的函数体，指向w1返回的新函数体。</p><h2 id="3-python解释器执行顺序"><a href="#3-python解释器执行顺序" class="headerlink" title="3.python解释器执行顺序"></a>3.python解释器执行顺序</h2><p>从pthon解释器层面具体执行顺序:</p><pre class="line-numbers language-none"><code class="language-none">def w1(func): # 将w1函数加载到内存<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">@w1 # 即执行w1(f1),在这里先存一个记录点，此时内存中并没有f1的定义，继续向下执行<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">def f1(): # 将f1函数加载到内存<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">@w1 # 此时才会真正执行f1 &#x3D; w1(f1),将w1函数的返回值赋值给f1，f1指向新的函数体<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="三、补充说明"><a href="#三、补充说明" class="headerlink" title="三、补充说明"></a>三、补充说明</h1><p>python解释器遇到<code>函数体()</code>才会去执行一个函数，遇到<code>def func()</code>和<code>func</code>不会去执行。</p><p>最后在来看一下代码的输出结果</p><pre class="line-numbers language-none"><code class="language-none">@w1 # 执行f1&#x3D;w1(f1)，w1函数被执行，所以w1函数体的的print会执行def f1():    print &#39;--f1()--&#39;# 执行结果--执行w1()----w1()执行结束--<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">f1() # 执行被装饰后的f1# 执行结果--执行inner()----f1()--<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 装饰器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git pull特别慢的解决方法</title>
      <link href="2021/03/19/git-pull-te-bie-man-de-jie-jue-fang-fa/"/>
      <url>2021/03/19/git-pull-te-bie-man-de-jie-jue-fang-fa/</url>
      
        <content type="html"><![CDATA[<blockquote><p>修改<code>hosts</code>配置解决<code>git pull</code>网络通信慢的问题</p></blockquote><span id="more"></span><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><ul><li>git pull 特别慢</li><li>ssh -T <code>git@github.com </code>很慢</li></ul><h3 id="解决办法一"><a href="#解决办法一" class="headerlink" title="解决办法一"></a>解决办法一</h3><h4 id="查询GitHub域名ip"><a href="#查询GitHub域名ip" class="headerlink" title="查询GitHub域名ip"></a>查询GitHub域名ip</h4><p>我们可以利用<a href="https://www.ipaddress.com/">https://www.ipaddress.com/</a> 来获得以下两个GitHub域名的IP地址：</p><ul><li>github.com</li><li>github.global.ssl.fastly.net</li></ul><p>打开网页后，利用输入框内分别查询两个域名：</p><p><img src="https://aamuqiao.oss-cn-beijing.aliyuncs.com/uPic/Lfp4Xj.png" alt="github.com"><br><img src="https://aamuqiao.oss-cn-beijing.aliyuncs.com/uPic/7rUMBA.png" alt="fastly.net"></p><h4 id="修改hosts文件-刷新dns缓存"><a href="#修改hosts文件-刷新dns缓存" class="headerlink" title="修改hosts文件,刷新dns缓存"></a>修改hosts文件,刷新dns缓存</h4><p>将以上两段IP写入Hosts文件中：</p><p>mac:</p><pre class="line-numbers language-none"><code class="language-none">sudo vi &#x2F;etc&#x2F;hosts# 添加199.232.69.194 github.global.ssl.fastly.net140.82.112.4 github.com# 退出文件执行sudo killall -HUP mDNSResponder<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>windows:</p><pre class="line-numbers language-none"><code class="language-none"># hosts文件位置：C:\windows\system32\drivers\etc刷新dns：win+r，输入CMD，回车在命令行执行:ipconfig &#x2F;flushdns #清除DNS缓存内容。ps:ipconfig &#x2F;displaydns&#x2F;&#x2F;显示DNS缓存内容<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="解决办法二"><a href="#解决办法二" class="headerlink" title="解决办法二"></a>解决办法二</h3><p>由于看到github的两个IP属地为美国，因此将代理服务器切换至美国，并开启全局模式（实际验证PAC模式问题依旧），重新打开一个终端，git pull速度大幅提升</p>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/03/19/hello-world/"/>
      <url>2021/03/19/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! <span id="more"></span>This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>超详细Hexo+Github博客搭建小白教程</title>
      <link href="2021/03/19/chao-xiang-xi-hexo-github-bo-ke-da-jian-xiao-bai-jiao-cheng/"/>
      <url>2021/03/19/chao-xiang-xi-hexo-github-bo-ke-da-jian-xiao-bai-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<blockquote><p>利用<code>github</code>和<code>hexo</code>快速搭建个人博客，效果炫酷</p></blockquote><span id="more"></span><h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><p>首先下载稳定版Node.js[<a href="https://nodejs.org/zh-cn/download/">下载地址</a>]，选择相应的系统版本。</p><p>mac用户下载macos安装包，点击下一步安装即可。</p><pre class="line-numbers language-none"><code class="language-none">This package has installed:•Node.js v14.16.0 to &#x2F;usr&#x2F;local&#x2F;bin&#x2F;node•npm v6.14.11 to &#x2F;usr&#x2F;local&#x2F;bin&#x2F;npmMake sure that &#x2F;usr&#x2F;local&#x2F;bin is in your $PATH.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>安装好之后，打开命令终端，输入node -v和npm -v，如果出现版本号，那么就安装成功了。</p><h4 id="添加国内镜像源"><a href="#添加国内镜像源" class="headerlink" title="添加国内镜像源"></a>添加国内镜像源</h4><blockquote><p>使用阿里的国内镜像进行加速</p></blockquote><pre class="line-numbers language-none"><code class="language-none">npm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><p>为了把本地的网页文件上传到github上面去，我们需要用到分布式版本控制工具—Git[<a href="https://git-scm.com/downloads">下载地址</a>]。</p><p>安装完成后在命令提示符中输入git –version验证是否安装成功。</p><h3 id="注册Github账号"><a href="#注册Github账号" class="headerlink" title="注册Github账号"></a>注册Github账号</h3><blockquote><p>打开<a href="https://github.com/">github</a>，新建一个项目,输入自己的项目名字，后面一定要加<code>.github.io</code>后缀README初始化也要勾上。名称一定要和你的github名字完全一样，比如你<code>github</code>名字叫<code>abc</code>，那么仓库名字一定要是<code>abc.github.io</code>。</p></blockquote><p>例如我的github名称为<code>amuqiao</code><br><img src="https://aamuqiao.oss-cn-beijing.aliyuncs.com/uPic/FvRygZ.png" alt="FvRygZ"></p><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>安装</p><ul><li>[<a href="https://hexo.io/zh-cn/docs/index.html">官方安装文档</a>]</li><li>在合适的地方新建一个文件夹，用来存放自己的博客文件，比如我的博客文件都存放在<code>/Users/wangqiao/NutstoreFiles/blog-new</code>目录下。</li></ul><p>按照官方文档说明完成安装、建站操作。</p><pre class="line-numbers language-none"><code class="language-none">$ npm install -g hexo-cli$ hexo init &lt;folder&gt;$ cd &lt;folder&gt;$ npm install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>输入<code>hexo s</code>打开本地服务器，然后浏览器打开<a href="http://localhost:4000/">http://localhost:4000/</a>，就可以看到我们的博客啦，</p><pre class="line-numbers language-none"><code class="language-none">➜  blog-new hexo serverINFO  Validating configINFO  Start processingINFO  Hexo is running at http:&#x2F;&#x2F;localhost:4000 . Press Ctrl+C to stop.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://aamuqiao.oss-cn-beijing.aliyuncs.com/uPic/bIoB82.png" alt="bIoB82"></p><h3 id="连接Github与本地"><a href="#连接Github与本地" class="headerlink" title="连接Github与本地"></a>连接Github与本地</h3><h4 id="添加github-ssh秘钥"><a href="#添加github-ssh秘钥" class="headerlink" title="添加github ssh秘钥"></a>添加github ssh秘钥</h4><pre class="line-numbers language-none"><code class="language-none">ssh-keygen  # 直接enter即可，不用选择yes or nocat ~&#x2F;.ssh&#x2F;id_rsa.pub<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在github中配置ssh公钥<br><img src="https://aamuqiao.oss-cn-beijing.aliyuncs.com/uPic/BBYeWY.png" alt="BBYeWY"></p><p>打开博客根目录下的_config.yml文件，这是博客的配置文件，在这里你可以修改与博客相关的各种信息。</p><p>修改最后一行的配置：</p><pre class="line-numbers language-none"><code class="language-none">deploy:  type: git  repository: https:&#x2F;&#x2F;github.com&#x2F;amuqiao&#x2F;amuqiao.github.io.git  branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>repository修改为你自己的github项目地址。</p><h3 id="写文章、发布文章"><a href="#写文章、发布文章" class="headerlink" title="写文章、发布文章"></a>写文章、发布文章</h3><p>你可以执行下列命令来创建一篇新文章或者新的页面。</p><pre class="line-numbers language-none"><code class="language-none"># 您可以在命令中指定文章的布局（layout），默认为 post，可以通过修改 _config.yml 中的 default_layout 参数来指定默认布局。$ hexo new [layout] &lt;title&gt;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后打开<code>blog-new/source/_posts/</code>的目录，可以发现下面多了一个文件夹和一个.md文件，一个用来存放你的图片等数据，另一个就是你的文章文件。</p><p>编写完markdown文件后，</p><pre class="line-numbers language-none"><code class="language-none">hexo g # 生成静态网页hexo s # 可以本地预览效果<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这时打开你的<a href="http://localhost:4000/">http://localhost:4000</a>就能看到发布的文章啦。</p><h3 id="一键部署"><a href="#一键部署" class="headerlink" title="一键部署"></a>一键部署</h3><p>安装 <a href="https://github.com/hexojs/hexo-deployer-git">hexo-deployer-git</a>.</p><pre class="line-numbers language-none"><code class="language-none">$ npm install hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 _config.yml（如果有已存在的请删除）添加如下配置：</p><pre class="line-numbers language-none"><code class="language-none">deploy:  type: git  repo: git@github.com:amuqiao&#x2F;amuqiao.github.io.git  branch: main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>运行 <code>hexo clean</code> &amp;&amp; <code>hexo deploy</code> 。</p><p>查看 <code>username.github.io</code> 上的网页是否部署成功。</p><h3 id="博客备份"><a href="#博客备份" class="headerlink" title="博客备份"></a>博客备份</h3><p>有时候我们想换一台电脑继续写博客，这时候就可以将博客目录下的所有源文件都上传到github上面。</p><p>首先在github博客仓库下新建一个分支hexo，然后git clone到本地，把.git文件夹拿出来，放在博客根目录下。</p><pre class="line-numbers language-none"><code class="language-none">git clone git@github.com:amuqiao&#x2F;amuqiao.github.io.gitcd amuqiao.github.io# mac shift+command+. 显示隐藏文件夹mv .git&#x2F; ..&#x2F;blog-new  # 将.git目录移动到博客根目录git checkout hexo # 切换到hexo分支git add . # git commit -m &quot;xxx&quot; git push origin hexo # 推送到远端分支<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<code>github</code>上可以看到，<code>main</code>分支只有静态网页文件，<code>hexo</code>分支包含所有源文件</p><h3 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h3><p>博客主题: <a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">hexo-theme-matery</a>，它的文档写得也非常的详细，还有中英文两个版本，作者回复也很及时。</p><h3 id="文章模板设置"><a href="#文章模板设置" class="headerlink" title="文章模板设置"></a>文章模板设置</h3><p>首先为了新建文章方便，建议将/scaffolds/post.md修改为如下代码：</p><pre class="line-numbers language-none"><code class="language-none">--- title: &#123;&#123; title &#125;&#125; date: &#123;&#123; date &#125;&#125; top: false cover: false password: toc: true mathjax: true summary: tags: categories: ---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>新建文章后不用你自己补充了，修改信息就行。</p><h3 id="添加百度统计和谷歌统计代码"><a href="#添加百度统计和谷歌统计代码" class="headerlink" title="添加百度统计和谷歌统计代码"></a>添加百度统计和谷歌统计代码</h3><p>首先打开<a href="https://ziyuan.baidu.com/site/index">百度站长平台</a>，然后点击添加网站，输入网址并选择领域。</p><p>接下来要验证网站所有权，有三种方式，推荐采用HTML标签验证，最简单，将代码复制出来。</p><p>打开themes/matery/layout/_partial/head.ejs，修改下面两行：</p><pre class="line-numbers language-none"><code class="language-none">&lt;meta name&#x3D;&quot;baidu-site-verification&quot; content&#x3D;&quot;xxx&quot; &#x2F;&gt;&lt;meta name&#x3D;&quot;google-site-verification&quot; content&#x3D;&quot;xxx&quot; &#x2F;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>其中content内容改成你自己刚刚复制出来的就行了。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://godweiyang.com/2018/04/13/hexo-blog/">超详细Hexo+Github博客搭建小白教程</a></li><li><a href="https://blinkfox.github.io/2018/09/28/qian-duan/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/">Hexo博客主题之hexo-theme-matery的介绍</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> hexo-theme-matery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>matery主题定制</title>
      <link href="2021/03/19/matery-zhu-ti-ding-zhi/"/>
      <url>2021/03/19/matery-zhu-ti-ding-zhi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>基于hexo-theme-matery做的个性化美化</p></blockquote><span id="more"></span><h3 id="限定预览文字字数"><a href="#限定预览文字字数" class="headerlink" title="限定预览文字字数"></a>限定预览文字字数</h3><pre class="line-numbers language-none"><code class="language-none"># 在预览文字后添加限定符号 &lt;!-- more--&gt;Welcome to Hexo &lt;!-- more--&gt; This is your very first post. <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://aamuqiao.oss-cn-beijing.aliyuncs.com/uPic/87j2QT.jpg" alt="限定预览文字"></p><h3 id="去掉首页banner的背景颜色"><a href="#去掉首页banner的背景颜色" class="headerlink" title="去掉首页banner的背景颜色"></a>去掉首页banner的背景颜色</h3><p>打开<code>themes/matery/source/css/matery.css</code>文件(367行，也可以快速搜索<code>.bg-cover:after</code>进行定位):<br>然后注释掉这两行<code>css</code></p><pre class="line-numbers language-none"><code class="language-none">.bg-cover:after &#123;    &#x2F;* -webkit-animation: rainbow 60s infinite;    animation: rainbow 60s infinite; *&#x2F;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="修改社交连接"><a href="#修改社交连接" class="headerlink" title="修改社交连接"></a>修改社交连接</h3><p>首页第二个按钮跳转到自己的github</p><p>修改主题配置文件，修改链接</p><pre class="line-numbers language-none"><code class="language-none">首页 banner 中的第二行个人信息配置，留空即不启用indexbtn:  enable: false  name: Github  icon: fab fa-github-alt  url: https:&#x2F;&#x2F;github.com&#x2F;blinkfox&#x2F;hexo-theme-matery  # 首页 banner 中的第二行个人信息配置，留空即不启用socialLink:  github:  https:&#x2F;&#x2F;github.com&#x2F;blinkfox  email: 1181062873@qq.com  facebook: # https:&#x2F;&#x2F;www.facebook.com&#x2F;xxx  twitter: # https:&#x2F;&#x2F;twitter.com&#x2F;xxx  qq: 1181062873  weibo: # https:&#x2F;&#x2F;weibo.com&#x2F;xxx  zhihu: # https:&#x2F;&#x2F;www.zhihu.com&#x2F;xxx  rss: true # true、false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="本地资源文件夹"><a href="#本地资源文件夹" class="headerlink" title="本地资源文件夹"></a>本地资源文件夹</h3><blockquote><p>资源（Asset）代表 source 文件夹中除了文章以外的所有文件，例如图片、CSS、JS 文件等。比方说，如果你的Hexo项目中只有少量图片，那最简单的方法就是将它们放在 source/images 文件夹中。然后通过类似于 <img src="/images/image.jpg"> 的方法访问它们。</p></blockquote><p>添加<a href="https://hexo.io/zh-cn/docs/asset-folders.html">资源文件夹</a></p><h4 id="修改文章特色图片"><a href="#修改文章特色图片" class="headerlink" title="修改文章特色图片"></a>修改文章特色图片</h4><p><img src="https://aamuqiao.oss-cn-beijing.aliyuncs.com/uPic/%E6%A3%AE%E6%9E%97%E7%9A%84%E7%8C%AB.jpg" alt="森林的猫"></p><p>修改文章 Front-matter选项</p><ul><li>修改<code>img</code>为图片的<code>url</code>链接</li></ul><pre class="line-numbers language-none"><code class="language-none">img: https:&#x2F;&#x2F;aamuqiao.oss-cn-beijing.aliyuncs.com&#x2F;uPic&#x2F;%E6%A3%AE%E6%9E%97%E7%9A%84%E7%8C%AB.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>修改为本地资源路径</li></ul><pre class="line-numbers language-none"><code class="language-none">img: images&#x2F;森林的猫.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> hexo-theme-matery </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
